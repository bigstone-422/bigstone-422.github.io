<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>一块大石头_</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>衣带渐宽终不悔，为伊消得人憔悴。</description>
    <pubDate>Fri, 08 Oct 2021 13:15:52 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>JS学习第十四天</title>
      <link>http://example.com/2021/10/08/day14%E8%87%AA%E6%80%BB/</link>
      <guid>http://example.com/2021/10/08/day14%E8%87%AA%E6%80%BB/</guid>
      <pubDate>Fri, 08 Oct 2021 13:14:57 GMT</pubDate>
      
      <description>&lt;p&gt;第十三天未总结，因为只写了几个函数，第十四天学习了回调函数和闭包。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>第十三天未总结，因为只写了几个函数，第十四天学习了回调函数和闭包。</p><span id="more"></span><h1 id="day14"><a href="#day14" class="headerlink" title="day14"></a>day14</h1><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>回调函数：执行完一个动作之后还要继续执行的函数<br>作为实参传递的函数就是回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;啦啦啦&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;乌拉!!!&#x27;</span>)</span><br><span class="line">    fn()</span><br><span class="line">&#125;</span><br><span class="line">b(a)</span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>匿名：没有名字的函数<br>直接写会报错，将匿名函数转换成函数表达式，外加()，同样具有函数的特点</p><p>立即执行函数：</p><p>函数自执行 分号必须加不可以省略<br>有参数<br>有函数返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;俺是一个匿名函数&#x27;</span>);</span><br><span class="line">&#125;)();</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;俺是另一个回调函数&#x27;</span>);</span><br><span class="line">&#125;());</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(a,s,d,f,g);</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;)(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"><span class="keyword">var</span> a = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="string">&#x27;哈哈哈哈&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>可以访问其他函数内部变量的函数就是闭包。<br>函数里边套函数，内部函数访问外部函数的变量<br>可以扩大作用范围，缓存数据<br>但是如果有大量缓存数据会造成内存泄漏。不参与垃圾回收机制</p><p>使用断点调试</p><ol><li>outer的第一行代码</li><li>inner的第一行代码</li><li>刷新  看右侧或者底部的 Scope local: 当前作用域 Global: 全局 closure: 闭包</li></ol><p>注意: 外部函数调用一次就会形成一个新的闭包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res = outer();</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">//fun</span></span><br><span class="line">res() <span class="comment">//11</span></span><br><span class="line">res() <span class="comment">//12</span></span><br><span class="line"><span class="keyword">var</span> res1 = outer();</span><br><span class="line">res1() <span class="comment">//11</span></span><br></pre></td></tr></table></figure><p>当前作用域需要自己变量的值的时候，使用闭包</p><p>在for循环所添加的事件中 解决不能通过下标得到正确的元素的问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(lis);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">        <span class="number">4</span></span><br><span class="line">        lis[s].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟私有变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> user = val;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getUser: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(user);</span><br><span class="line">        &#125;,</span><br><span class="line">        setUser: <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">            user = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> u = create(<span class="string">&#x27;一块大石头_&#x27;</span>);</span><br><span class="line">u.getUser()</span><br><span class="line">u.setUser(<span class="string">&#x27;暴走の石尼玛&#x27;</span>)</span><br><span class="line">u.getUser()</span><br><span class="line"><span class="keyword">var</span> u1 = create(<span class="string">&#x27;浅墨初白&#x27;</span>);</span><br><span class="line">u1.getUser()</span><br></pre></td></tr></table></figure><p>一个面试题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n, o</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(o);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&quot;fun&quot;</span>: <span class="function"><span class="keyword">function</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> fun(m, n)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = fun(<span class="number">0</span>); <span class="comment">//undefined</span></span><br><span class="line">a.fun(<span class="number">1</span>) <span class="comment">//0</span></span><br><span class="line">a.fun(<span class="number">2</span>) <span class="comment">//0</span></span><br><span class="line">a.fun(<span class="number">3</span>) <span class="comment">//0</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    var a = fun(n, o)--&gt; fun(0) --&gt; n = 0 o = undefined</span></span><br><span class="line"><span class="comment">    a = &#123;fun: function(m)&#123;  &#125;&#125;</span></span><br><span class="line"><span class="comment">        a.fun(1)</span></span><br><span class="line"><span class="comment">            m = 1 fun(m, n)  m = 1  n = 0  fun(1, 0) --&gt; fun(n, o) n = 1 o = 0 log(o) --&gt; 0</span></span><br><span class="line"><span class="comment">        a.fun(2)</span></span><br><span class="line"><span class="comment">            m = 2 fun(m, n) m = 2 n = 0 fun(2, 0) --&gt; fun(n, o) n = 2 o = 0 log(o) --&gt; 0</span></span><br><span class="line"><span class="comment">        a.fun(3)</span></span><br><span class="line"><span class="comment">            m = 3 fun(m, n) m = 3 n = 0 fun(3, 0) --&gt; fun(n, o) n = 3 o = 0 log(o) --&gt; 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>输出结果和执行顺序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i, <span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="keyword">new</span> <span class="built_in">Date</span>().getTime());</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i, <span class="keyword">new</span> <span class="built_in">Date</span>());</span><br></pre></td></tr></table></figure><h2 id="代码分类"><a href="#代码分类" class="headerlink" title="代码分类"></a>代码分类</h2><p>同步: 当前代码执行的时候 后续的代码等着 alert for<br>异步: 当前代码执行的时候 后续代码不等待执行完成 就可以直接执行 定时器</p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2021/10/08/day14%E8%87%AA%E6%80%BB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JS学习第十二天</title>
      <link>http://example.com/2021/09/29/day12%E8%87%AA%E6%80%BB/</link>
      <guid>http://example.com/2021/09/29/day12%E8%87%AA%E6%80%BB/</guid>
      <pubDate>Wed, 29 Sep 2021 13:24:47 GMT</pubDate>
      
      <description>&lt;p&gt;第十二天学习了事件绑定方法，键盘事件，滚轮事件等等。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>第十二天学习了事件绑定方法，键盘事件，滚轮事件等等。</p><span id="more"></span><h1 id="day12"><a href="#day12" class="headerlink" title="day12"></a>day12</h1><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h4><p>事件绑定：利用特定的方法可以实现给一个元素的同一个事件添加多个事件处理函数</p><p>标准: 元素.addEventListener(事件类型, 事件处理函数, [是否捕获])</p><p>  事件类型: 不加on</p><p>  事件处理函数: 函数名 函数</p><p>  是否捕获: 默认false冒泡 true: 捕获</p><p>ie: 对象不支持“addEventListener”属性或方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(div.addEventListener); <span class="comment">// ie: undefined  标准: 函数</span></span><br><span class="line"><span class="comment">// div.addEventListener(&#x27;click&#x27;, a, false);</span></span><br><span class="line"><span class="comment">// div.addEventListener(&#x27;click&#x27;, function () &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;这是第二个事件绑定的函数&#x27;);</span></span><br><span class="line"><span class="comment">//     console.log(this);</span></span><br><span class="line"><span class="comment">// &#125;, false);</span></span><br></pre></td></tr></table></figure><h4 id="ie"><a href="#ie" class="headerlink" title="ie"></a>ie</h4><p>ie: 元素.attachEvent(on+事件类型, 事件处理函数)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(div.attachEvent); <span class="comment">// ie: 函数  标准: undefined</span></span><br><span class="line">div.attachEvent(<span class="string">&#x27;onclick&#x27;</span>, a);</span><br><span class="line">div.attachEvent(<span class="string">&#x27;onclick&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;这是添加的第二个&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="ie和标准事件机制的区别"><a href="#ie和标准事件机制的区别" class="headerlink" title="ie和标准事件机制的区别"></a>ie和标准事件机制的区别</h3><p>\1. 是否加on: ie: 加on 标准: 不加</p><p>\2. 是否捕获: ie: 没有捕获 标准: 有捕获</p><p>\3. 执行顺序: ie: 倒叙执行 标准: 顺序执行</p><p>\4. this的指向: ie: window 标准: 触发源</p><h3 id="兼容"><a href="#兼容" class="headerlink" title="兼容"></a>兼容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (div.addEventListener) &#123;</span><br><span class="line">    <span class="comment">// 标准</span></span><br><span class="line">    div.addEventListener(<span class="string">&#x27;click&#x27;</span>, a, <span class="literal">false</span>);</span><br><span class="line">    div.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;这是第二个事件绑定的函数&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// ie</span></span><br><span class="line">    div.attachEvent(<span class="string">&#x27;onclick&#x27;</span>, a);</span><br><span class="line">    div.attachEvent(<span class="string">&#x27;onclick&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;这是添加的第二个&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">ele, type, fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ele: 元素</span></span><br><span class="line">    <span class="comment">// type: 事件类型</span></span><br><span class="line">    <span class="keyword">if</span> (ele.addEventListener) &#123;</span><br><span class="line">        <span class="comment">// 标准</span></span><br><span class="line">        ele.addEventListener(type, fn, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// ie</span></span><br><span class="line">        ele.attachEvent(<span class="string">&#x27;on&#x27;</span> + type, fn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件解绑-事件取消"><a href="#事件解绑-事件取消" class="headerlink" title="事件解绑/事件取消"></a>事件解绑/事件取消</h2><p>元素. 事件 元素. 事件 = null</p><p>addEventListener 元素.removeEventListener(事件类型, 函数名, [是否捕获])</p><p>attachEvent   元素.detachEvent(on+事件类型, 函数名)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div.onclick = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">111</span>);</span><br><span class="line">&#125;</span><br><span class="line">bind(div, <span class="string">&#x27;click&#x27;</span>, a);</span><br><span class="line"><span class="built_in">console</span>.log(div.removeEventListener); <span class="comment">// ie: undefined 标准: 函数</span></span><br><span class="line"><span class="built_in">console</span>.log(div.detachEvent); <span class="comment">// ie: 函数  标准: undefined </span></span><br><span class="line"><span class="comment">// div.removeEventListener(&#x27;click&#x27;, a, false);</span></span><br><span class="line"><span class="comment">// div.detachEvent(&#x27;onclick&#x27;, a);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// if(div.removeEventListener)&#123;</span></span><br><span class="line"><span class="comment">//     // 标准</span></span><br><span class="line"><span class="comment">//     div.removeEventListener(&#x27;click&#x27;, a, false);</span></span><br><span class="line"><span class="comment">// &#125; else &#123;</span></span><br><span class="line"><span class="comment">//     // ie</span></span><br><span class="line"><span class="comment">//     div.detachEvent(&#x27;onclick&#x27;, a);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>封装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">unbind(div, <span class="string">&#x27;click&#x27;</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unbind</span>(<span class="params">ele, type, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ele.removeEventListener) &#123;</span><br><span class="line">        <span class="comment">// 标准</span></span><br><span class="line">        ele.removeEventListener(type, fn, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// ie</span></span><br><span class="line">        ele.detachEvent(<span class="string">&#x27;on&#x27;</span> + type, fn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p>事件流: 当事件发生的时候, 事件在父子节点之间固定的传递顺序。</p><p>  捕获型事件(标准) 冒泡型事件</p><p>  捕获阶段: 当事件发生的时候, 事件从window开始往子元素传递</p><p>  确定目标: 确定鼠标的触发源</p><p>  冒泡阶段: 触发源接收到事件并且开始处理. 处理完成后, 会将事件从当前往父节点传递, 一直到window</p><p>所有事件经过的节点, 都会接收并且去触发这个事件</p><h2 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h2><p>标准: 事件对象.stopPropagation()</p><p>ie: 事件对象.cancelBubble = true</p><p>兼容: 如果一个方法一个属性 用方法是否存在来做判断</p><p>  ev.stopPropagation ? ev.stopPropagation() : ev.cancelBubble = true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取元素</span></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(btn, div);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">evs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ev = <span class="built_in">window</span>.event || evs;</span><br><span class="line">    <span class="comment">// 阻止冒泡</span></span><br><span class="line">    <span class="comment">// console.log(ev.stopPropagation); // ie: undefined 标准: 函数</span></span><br><span class="line">    <span class="comment">// ev.stopPropagation();</span></span><br><span class="line">    <span class="comment">// ev.cancelBubble = true;</span></span><br><span class="line">    ev.stopPropagation ? ev.stopPropagation() : ev.cancelBubble = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    div.style.display = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    div.style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="取消默认行为"><a href="#取消默认行为" class="headerlink" title="取消默认行为"></a>取消默认行为</h2><p>默认行为:</p><p>  a标签的跳转</p><p>  右键菜单</p><p>  按下拖拽的时候选中文字</p><p>  图片拖拽保存</p><p>取消默认行为：</p><p>  元素. 事件 return false</p><p>  标准: addEventListener ev.preventDefault()</p><p>  ie: attachEvent  ev.returnValue = false<br>兼容:</p><p>  ev.preventDefault ? ev.preventDefault() : ev.returnValue = false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// a.onclick = function () &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;点击&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     // 取消默认行为</span></span><br><span class="line"><span class="comment">//     return false;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">bind(a, <span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ev = <span class="built_in">window</span>.event || evs;</span><br><span class="line">    <span class="comment">// ev.preventDefault();</span></span><br><span class="line">    <span class="comment">// ev.returnValue = false;</span></span><br><span class="line">    ev.preventDefault ? ev.preventDefault() : ev.returnValue = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;点击了&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>事件委托(事件代理): 将子元素要做的事情交给父元素, 通过target或srcElement找到指定的触发源, 将后续代码交给触发源来处理</p><p>优点:</p><p>\1. 如果现在元素数量过多 执行速度较快</p><p>\2. 如果元素发生在未来, 后面的元素也有事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ul.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">evs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ev = <span class="built_in">window</span>.event || evs;</span><br><span class="line">    <span class="built_in">console</span>.log(ev.target || ev.srcElement);</span><br><span class="line">    <span class="keyword">var</span> tar = ev.target || ev.srcElement;</span><br><span class="line">    <span class="comment">// 判断触发源是不是li 如果是li 输出内容</span></span><br><span class="line">    <span class="keyword">if</span> (tar.nodeName == <span class="string">&#x27;LI&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(tar.innerHTML);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> li1 = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">li1.innerHTML = <span class="string">&#x27;2222&#x27;</span>;</span><br><span class="line">ul.appendChild(li1);</span><br></pre></td></tr></table></figure><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><p>document\表单元素</p><p>onkeyup 抬起</p><p>obkeydown 按下 键盘上任何一个键都可以触发 不区分大小写, 返回大写的编码</p><p>​      特殊键shift + 1 —&gt; shift + 49 –&gt; ! + 49</p><p>obkeypress 按下 键盘上字符可以触发 区分大小分, 返回大写和小写字母的编码</p><p>​      特殊键shift + 1 —&gt; ! 33</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">evs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ev = <span class="built_in">window</span>.event || evs;</span><br><span class="line">    <span class="comment">// console.log(ev); // KeyboardEvent</span></span><br><span class="line">    <span class="built_in">console</span>.log(ev.key); <span class="comment">// 标准: 具体的字符 ie: undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(ev.keyCode); <span class="comment">// ASCII码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// document.onkeypress = function (evs) &#123;</span></span><br><span class="line"><span class="comment">//     var ev = window.event || evs;</span></span><br><span class="line"><span class="comment">//     // console.log(ev); // KeyboardEvent</span></span><br><span class="line"><span class="comment">//     console.log(ev.key); // 标准: 具体的字符 ie: undefined</span></span><br><span class="line"><span class="comment">//     console.log(ev.keyCode); // ASCII码</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.onkeyup = <span class="function"><span class="keyword">function</span>(<span class="params">evs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ev = <span class="built_in">window</span>.event || evs;</span><br><span class="line">    <span class="built_in">console</span>.log(ev.keyCode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="滚轮事件"><a href="#滚轮事件" class="headerlink" title="滚轮事件"></a>滚轮事件</h2><p>chrome/ie: onmousewheel</p><p>  wheelDelta: 120或150的倍数</p><p>​    &gt; 0 向上</p><p>​    &lt; 0 向下</p><p>ff: 事件必须通过事件监听的方式 DOMMouseScroll</p><p>  detail: 3和3的倍数</p><p>​    &gt; 0 向下</p><p>​    &lt; 0 向上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mouseScroll</span>(<span class="params">ele, upFn, downFn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ele: 元素</span></span><br><span class="line">    ele.onmousewheel = scroll;</span><br><span class="line">    <span class="keyword">if</span> (ele.addEventListener) &#123;</span><br><span class="line">        ele.addEventListener(<span class="string">&#x27;DOMMouseScroll&#x27;</span>, scroll);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 滚动滚轮触发的事件</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">scroll</span>(<span class="params">evs</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ev = <span class="built_in">window</span>.event || evs;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ev.wheelDelta) &#123;</span><br><span class="line">            <span class="comment">// chrome ie</span></span><br><span class="line">            <span class="keyword">var</span> tag = ev.wheelDelta &gt; <span class="number">0</span> ? <span class="string">&#x27;上&#x27;</span> : <span class="string">&#x27;下&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// ff</span></span><br><span class="line">            <span class="keyword">var</span> tag = ev.detail &gt; <span class="number">0</span> ? <span class="string">&#x27;下&#x27;</span> : <span class="string">&#x27;上&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据滚轮向上向下执行不同的代码</span></span><br><span class="line">        <span class="keyword">if</span> (tag == <span class="string">&#x27;上&#x27;</span>) &#123;</span><br><span class="line">            upFn();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            downFn();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2021/09/29/day12%E8%87%AA%E6%80%BB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JS学习第十一天</title>
      <link>http://example.com/2021/09/28/day11%E8%87%AA%E6%80%BB/</link>
      <guid>http://example.com/2021/09/28/day11%E8%87%AA%E6%80%BB/</guid>
      <pubDate>Tue, 28 Sep 2021 13:14:00 GMT</pubDate>
      
      <description>&lt;p&gt;第十一天学习了操作BOM对象，懒加载，事件对象等等。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>第十一天学习了操作BOM对象，懒加载，事件对象等等。</p><span id="more"></span><h1 id="day11"><a href="#day11" class="headerlink" title="day11"></a>day11</h1><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p>BOM: Browser Object Model 浏览器对象模型<br>BOM的核心是window 可以直接使用变量名或者函数名就能出现效果的。所属对象都是window</p><h3 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h3><p>警告框 alert()<br>带有确定取消按钮的警告框 confirm()<br>带有输入框的对话框 prompt()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 警告框: alert()</span></span><br><span class="line"><span class="comment">// alert(&#x27;是否已经了解清除风险&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 带有确定取消按钮的警告框: confirm(&#x27;提示内容&#x27;)</span></span><br><span class="line"><span class="comment">// 接收返回值: 取消: false  确定: true</span></span><br><span class="line"><span class="comment">// var res = confirm(&#x27;是否已经了解风险&#x27;);</span></span><br><span class="line"><span class="comment">// console.log(res);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 带有输入框的对话框: prompt(&#x27;提示内容&#x27;, &#x27;默认值&#x27;)</span></span><br><span class="line"><span class="comment">// 接收返回值: 取消: null  确定: 输入框的内容</span></span><br><span class="line"><span class="comment">// var res = prompt(&#x27;请输入要购买的金额&#x27;, &#x27;10000&#x27;);</span></span><br><span class="line"><span class="comment">// console.log(res);</span></span><br></pre></td></tr></table></figure><h3 id="open与close"><a href="#open与close" class="headerlink" title="open与close"></a>open与close</h3><p>如果在标签里使用，window不能省略</p><h4 id="open"><a href="#open" class="headerlink" title="open"></a>open</h4><p>open: 打开<br>​语法: open(跳转的网址, target, 描述词, 是否替换当前页面在历史记录中的位置)<br>​target: 打开方式 _blank: 新标签页；_self: 当前<br>​描述词: 当前窗口宽高 属性名=属性值, 属性名=属性值  只在打开方式是_blank<br>​返回新页面的window</p><h4 id="close"><a href="#close" class="headerlink" title="close"></a>close</h4><p>close: 关闭<br>window对象.close()<br>js中关闭自己: close()</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>打开百度<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;https:\/\/www.bilibili.com&#x27;,&#x27;_blank&#x27;,&#x27;width=300px,height=300px&#x27;)&quot;</span>&gt;</span>打开哔哩哔哩<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>关闭我自己<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>关闭百度<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> new_win = <span class="literal">null</span></span></span><br><span class="line"><span class="javascript">        btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            new_win = open(<span class="string">&#x27;https://www.baidu.com&#x27;</span>, <span class="string">&#x27;_blank&#x27;</span>, <span class="string">&#x27;width=400px,height=400px&#x27;</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        btns[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">            close()</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        btns[<span class="number">3</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">            new_win.close()</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><p>location是BOM中最有用的对象之一. 既是BOM直接对象, 也是window下的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(location)</span><br><span class="line"><span class="built_in">console</span>.log(location.protocol) <span class="comment">//协议</span></span><br><span class="line"><span class="built_in">console</span>.log(location.hostname) <span class="comment">//服务器名</span></span><br><span class="line"><span class="built_in">console</span>.log(location.port); <span class="comment">//端口</span></span><br><span class="line"><span class="built_in">console</span>.log(location.host); <span class="comment">//服务器+端口</span></span><br><span class="line"><span class="built_in">console</span>.log(location.pathname); <span class="comment">//文件路径</span></span><br><span class="line"><span class="built_in">console</span>.log(location.search); <span class="comment">//搜索内容</span></span><br><span class="line"><span class="built_in">console</span>.log(location.hash); <span class="comment">//哈希值 #后边的内容</span></span><br><span class="line"><span class="built_in">console</span>.log(location.href); <span class="comment">//完整地址</span></span><br></pre></td></tr></table></figure><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>history: 历史记录<br>history.go(数字) 正数: 前进几个页面 负数: 后退几个页面 0: 刷新<br>history.back() 回退到上一个页面<br>history.forward() 前进到下一个页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(history);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 前进到02页面</span></span><br><span class="line">    <span class="comment">// history.forward();</span></span><br><span class="line">    <span class="comment">// history.go(2);</span></span><br><span class="line">    <span class="comment">// history.go(0);</span></span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="BOM事件"><a href="#BOM事件" class="headerlink" title="BOM事件"></a>BOM事件</h3><h4 id="onload"><a href="#onload" class="headerlink" title="onload"></a>onload</h4><p>当script标签写在body、页面结构之前的时候 获取元素拿不到正确的元素 去到的是null<br>原因: 由于代码是从上到下的顺序去执行的 当执行到script的时候页面中还没有元素 所以取不到<br>解决: 让js代码在页面结构之后或者使用 window.onload 事件: 等待页面和其中的资源(图片、视频…)都加载完成后 在执行其中的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(div);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="onscroll"><a href="#onscroll" class="headerlink" title="onscroll"></a>onscroll</h4><p>滚动事件<br>window.onscroll 事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//滚动事件</span></span><br><span class="line"><span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;你别巴拉我！&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="onresize"><a href="#onresize" class="headerlink" title="onresize"></a>onresize</h4><p>窗口大小改变事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//窗口大小改变事件</span></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;痛痛痛！！&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元素三大宽高"><a href="#元素三大宽高" class="headerlink" title="元素三大宽高"></a>元素三大宽高</h3><h4 id="client"><a href="#client" class="headerlink" title="client"></a>client</h4><p>元素可视宽高 client系列:<br>clientWidth/clientHeight: 元素的可视宽高 内容 + padding<br>clientLeft/clientTop: 左/上边框的宽度<br>屏幕的可视区域的宽高:document.documentElement.clientWidth/clientHeight</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* client系列</span></span><br><span class="line"><span class="comment">    clientWidth/clientHeight:元素的可视宽高</span></span><br><span class="line"><span class="comment">    clientLeft/clientTop 左/上边框的宽度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(div.clientHeight, div.clientWidth);</span><br><span class="line"><span class="built_in">console</span>.log(div.clientLeft, div.clientTop)</span><br><span class="line"></span><br><span class="line"><span class="comment">//屏幕的可视化宽高</span></span><br><span class="line"><span class="comment">//document.documentElement.clientWidth/clientHeight4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.documentElement.clientWidth, <span class="built_in">document</span>.documentElement.clientHeight);</span><br></pre></td></tr></table></figure><h4 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h4><p>offset: 元素的占位宽高<br>offsetWidth/offsetHeight: 元素的占位宽高 内容 + padding + border<br>offsetLeft/offasetTop: 元素距离具有定位属性的父元素的左侧/顶部的距离 如果没有定位父元素 就是距离body的距离</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    offset: 元素的占位宽高</span></span><br><span class="line"><span class="comment">        offsetWidth/offsetHeight: 元素的占位宽高 内容 + padding + border</span></span><br><span class="line"><span class="comment">        offsetLeft/offasetTop: 元素距离具有定位属性的父元素的左侧/顶部的距离 如果没有定位父元素 就是距离body的距离</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(div.offsetHeight, div.offsetWidth);</span><br><span class="line"><span class="built_in">console</span>.log(div.offsetLeft, div.offsetTop)</span><br></pre></td></tr></table></figure><h4 id="scroll"><a href="#scroll" class="headerlink" title="scroll"></a>scroll</h4><p>scroll: 滚动距离<br>scrollHeight/scrollWidth: 元素的实际宽高<br>scrollTop/scrollLeft: 超出当前页面/元素的距离  滚动卷去的距离<br>获取页面\窗口的滚动距离:<br>document.documentElement.scrollTop<br>document.documentElement.scrollLeft</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    scroll: 滚动距离</span></span><br><span class="line"><span class="comment">        scrollHeight/scrollWidth: 元素的实际宽高</span></span><br><span class="line"><span class="comment">        scrollTop/scrollLeft: 超出当前页面/元素的距离  滚动卷去的距离</span></span><br><span class="line"><span class="comment">    获取页面\窗口的滚动距离: </span></span><br><span class="line"><span class="comment">        document.documentElement.scrollTop</span></span><br><span class="line"><span class="comment">        document.documentElement.scrollLeft</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(div.scrollWidth, div.scrollHeight);</span><br><span class="line"><span class="comment">// 通过滚动事件</span></span><br><span class="line">div.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(div.scrollLeft, div.scrollTop);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取页面滚动的距离:</span></span><br><span class="line"><span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.documentElement.scrollTop, <span class="built_in">document</span>.documentElement.scrollLeft);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>scrollTop/scrollLeft可以被赋值 其他的只能获取不能设置</p><h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><p>以下为代码样例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取所有的img元素</span></span><br><span class="line"><span class="keyword">var</span> imgs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line"><span class="comment">//先调用函数，使得打开时，在屏幕范围内的图片可以先加载出来</span></span><br><span class="line">loadimg()</span><br><span class="line"><span class="comment">//添加滚动事件，当屏幕滚动的时候，判断是否符合要求</span></span><br><span class="line"><span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    loadimg()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加窗口大小改变事件，窗口大小改变时也会使图片出现在可视范围内</span></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    loadimg()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadimg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//遍历每一个图片</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> imgs) &#123;</span><br><span class="line">        <span class="comment">//判断图片是否出现在课时范围内</span></span><br><span class="line">        <span class="comment">//判断方法为，屏幕可视长度+滚动长度是否大于图片到浏览器顶部的距离</span></span><br><span class="line">        <span class="keyword">if</span> (i.offsetTop &lt; <span class="built_in">document</span>.documentElement.clientHeight + <span class="built_in">document</span>.documentElement.scrollTop - <span class="number">50</span>) &#123;</span><br><span class="line">            <span class="comment">//是的话就讲自定义属性里的地址给到src里边</span></span><br><span class="line">            i.src = i.getAttribute(<span class="string">&#x27;tags&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>当事件发生的时候, 浏览器将相关当前事件的信息都存在一个对象中, 这个对象就是事件对象<br>普通: event window.event<br>低版本ff: 事件处理函数的第一个形参的位置<br>事件对象兼容: var ev = window.event || evs</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">evs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ev = <span class="built_in">window</span>.event || evs</span><br><span class="line">    <span class="built_in">console</span>.log(ev)</span><br><span class="line">    <span class="built_in">console</span>.log(ev.type)</span><br><span class="line">    <span class="built_in">console</span>.log(ev.target || ev.srcElement)</span><br><span class="line">    <span class="built_in">console</span>.log(ev.clientX, ev.clientY); <span class="comment">// 鼠标距离屏幕可视区域的左上角的距离</span></span><br><span class="line">    <span class="built_in">console</span>.log(ev.screenX, ev.screenY); <span class="comment">// 鼠标距离屏幕的左上角的距离</span></span><br><span class="line">    <span class="built_in">console</span>.log(ev.pageX, ev.pageY); <span class="comment">// 鼠标距离页面左上角的距离</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2021/09/28/day11%E8%87%AA%E6%80%BB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JS学习第十天</title>
      <link>http://example.com/2021/09/27/day10%E8%87%AA%E6%80%BB/</link>
      <guid>http://example.com/2021/09/27/day10%E8%87%AA%E6%80%BB/</guid>
      <pubDate>Mon, 27 Sep 2021 13:41:57 GMT</pubDate>
      
      <description>&lt;p&gt;第十天学习了操作DOM树。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>第十天学习了操作DOM树。</p><span id="more"></span><h1 id="day10"><a href="#day10" class="headerlink" title="day10"></a>day10</h1><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>DOM树  浏览器在渲染页面的时候 会先形成树状结构 就叫做DOM树</p><p>DOM由节点组成的</p><h3 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h3><p>获取节点:  css选择器: css中选择器怎么写 这里就怎么写 id class tag 父子 层级 交叉…</p><p>ie8+  静态</p><p>获取符合选择器的第一个元素: document/父元素.querySelector(‘css选择器’)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(div); <span class="comment">// 直接获取到第一个div</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ul);</span><br></pre></td></tr></table></figure><p>获取所有符合选择器的元素: 节点的集合: document/父元素.querySelectorAll(‘css选择器’);</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lis = ul.querySelectorAll(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(lis); <span class="comment">// NodeList 节点列表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boxa = ul.querySelector(<span class="string">&#x27;.box.a&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(boxa);</span><br></pre></td></tr></table></figure><h3 id="获取子节点"><a href="#获取子节点" class="headerlink" title="获取子节点"></a>获取子节点</h3><p>父元素.children 标准: 标签节点  常用</p><p>父元素.childNodes 标准: 标签节点+文本节点+注释+…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取ul</span></span><br><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ul);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取子节点:</span></span><br><span class="line"><span class="comment">        父元素.children 标准: 标签节点  常用</span></span><br><span class="line"><span class="comment">        父元素.childNodes 标准: 标签节点+文本节点+注释+...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(ul.children);</span><br><span class="line"><span class="built_in">console</span>.log(ul.childNodes);</span><br></pre></td></tr></table></figure><h3 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h3><p>\1. 节点名称: 节点.nodeName  标签名大写</p><p>\2. 节点类型: 节点.nodeType 1-12  1–标签 2—属性 3—文本  8–注释 9–document</p><p>\3. 节点内容: 节点.nodeValue  只有文本节点(text)才有内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cls = ul.childNodes;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cls.length; i++) &#123;</span><br><span class="line">    <span class="comment">// console.log(cls[i], cls[i].nodeName, cls[i].nodeType, cls[i].nodeValue);</span></span><br><span class="line">    <span class="comment">// 获取标签的内容</span></span><br><span class="line">    <span class="keyword">if</span> (cls[i].nodeType == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(cls[i].childNodes[<span class="number">0</span>].nodeValue);</span><br><span class="line">        <span class="built_in">console</span>.log(cls[i].innerHTML);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取父节点"><a href="#获取父节点" class="headerlink" title="获取父节点"></a>获取父节点</h3><p>直接父节点: 节点.parentNode</p><p>定位父节点: 节点.offsetParent</p><p>​    如果没有定位父节点 获取到的是body</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取box</span></span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(box);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    直接父节点: 节点.parentNode</span></span><br><span class="line"><span class="comment">    定位父节点: 节点.offsetParent</span></span><br><span class="line"><span class="comment">        如果没有定位父节点 获取到的是body</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(box.parentNode);</span><br><span class="line"><span class="built_in">console</span>.log(box.offsetParent);</span><br></pre></td></tr></table></figure><h3 id="查找兄弟节点"><a href="#查找兄弟节点" class="headerlink" title="查找兄弟节点"></a>查找兄弟节点</h3><h4 id="获取上一个兄弟节点"><a href="#获取上一个兄弟节点" class="headerlink" title="获取上一个兄弟节点"></a>获取上一个兄弟节点</h4><p>标准: 节点.previousElementSibling  </p><p>​    ie: undefined  标准: 专门提供在标准浏览器中获取上一个兄弟节点</p><p>ie: 节点.previousSibling</p><p>​    ie8-: 可以获取到上一个兄弟节点  标准: 换行文本节点</p><p>两个值中二选一的时候可以选择用逻辑或短路 将可能出现undefined 的这一项放在前面</p><p>兼容: 节点.previousElementSibling || 节点.previousSibling</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取box</span></span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(box);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(box.previousElementSibling, box.previousSibling);</span><br><span class="line"><span class="built_in">console</span>.log(box.previousElementSibling || box.previousSibling);</span><br></pre></td></tr></table></figure><h4 id="获取下一个兄弟节点"><a href="#获取下一个兄弟节点" class="headerlink" title="获取下一个兄弟节点"></a>获取下一个兄弟节点</h4><p>标准: 节点.nextElementSibling  </p><p>​    ie: undefined  标准: 专门提供在标准浏览器中获取上一个兄弟节点</p><p>ie: 节点.nextSibling</p><p>​    ie8-: 可以获取到上一个兄弟节点  标准: 换行文本节点</p><p>两个值中二选一的时候可以选择用逻辑或短路 将可能出现undefined 的这一项放在前面</p><p>兼容: 节点.nextElementSibling || 节点.nextSibling</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(box.nextElementSibling, box.nextSibling);</span><br><span class="line"><span class="built_in">console</span>.log(box.nextElementSibling || box.nextSibling);</span><br></pre></td></tr></table></figure><h4 id="获取首个子节点"><a href="#获取首个子节点" class="headerlink" title="获取首个子节点"></a>获取首个子节点</h4><p>​    ie: firstChild</p><p>​    标准: firstElementChild</p><p>兼容: 节点.firstElementChild || 节点.firstChild</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取父节点</span></span><br><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ul);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    获取首个子节点:</span></span><br><span class="line"><span class="comment">        ie: firstChild</span></span><br><span class="line"><span class="comment">        标准: firstElementChild</span></span><br><span class="line"><span class="comment">    兼容: 节点.firstElementChild || 节点.firstChild</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(ul.firstChild, ul.firstElementChild);</span><br><span class="line"><span class="built_in">console</span>.log(ul.firstElementChild || ul.firstChild);</span><br></pre></td></tr></table></figure><h4 id="获取末位子节点"><a href="#获取末位子节点" class="headerlink" title="获取末位子节点"></a>获取末位子节点</h4><p>​    ie: lastChild</p><p>​    标准: lastElementChild</p><p>兼容: 节点.lastElementChild || 节点.lastChild</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(ul.lastElementChild || ul.lastChild);</span><br></pre></td></tr></table></figure><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><p>1.1 创建标签节点: var 变量 = document.createElement(‘标签名’)</p><p>1.2 创建文本节点: var 变量 = document.createTextNode(‘内容’)</p><p>1.3 将文本节点添加到标签节点中: 父节点.appendChild(子节点)</p><p>创建节点为了解决innerHTML重新赋值会覆盖原来所有元素的问题</p><p>为了简化过程, 常用innerHTML代替 1.2 1.3</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建节点:</span></span><br><span class="line"><span class="comment">// 1.1 创建标签节点: var 变量 = document.createElement(&#x27;标签名&#x27;);</span></span><br><span class="line"><span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(li);</span><br><span class="line"></span><br><span class="line"><span class="comment">// // 1.2 创建文本节点: var 变量 = document.createTextNode(&#x27;内容&#x27;);</span></span><br><span class="line"><span class="comment">// var txt = document.createTextNode(&#x27;这是新的li&#x27;);</span></span><br><span class="line"><span class="comment">// console.log(txt);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 1.3 将文本节点添加到标签节点中: 父节点.appendChild(子节点);</span></span><br><span class="line"><span class="comment">// li.appendChild(txt);</span></span><br><span class="line"><span class="comment">// console.log(li);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建节点为了解决innerHTML重新赋值会覆盖原来所有元素的问题</span></span><br><span class="line"><span class="comment">// 为了简化过程, 常用innerHTML代替 1.2 1.3</span></span><br><span class="line"></span><br><span class="line">li.innerHTML = <span class="string">&#x27;这是新的li&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(li);</span><br></pre></td></tr></table></figure><h3 id="追加节点"><a href="#追加节点" class="headerlink" title="追加节点"></a>追加节点</h3><h4 id="追加到父元素的末位"><a href="#追加到父元素的末位" class="headerlink" title="追加到父元素的末位"></a>追加到父元素的末位</h4><p>父节点.appendChild(子节点)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ul);</span><br><span class="line">ul.appendChild(li);</span><br></pre></td></tr></table></figure><h4 id="追加到某个节点之前"><a href="#追加到某个节点之前" class="headerlink" title="追加到某个节点之前"></a>追加到某个节点之前</h4><p>父节点.insertBefore(新节点, 参考节点)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> li1 = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">li1.innerHTML = <span class="string">&#x27;新的li1&#x27;</span>;</span><br><span class="line">ul.insertBefore(li1, ul.children[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> li2 = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">li2.innerHTML = <span class="string">&#x27;新的li2&#x27;</span>;</span><br><span class="line">ul.insertBefore(li2, ul.children[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><ol><li>删除自己: 节点.remove(); ie8+</li><li>删除子节点: 父节点.removeChild(子节点)   会把被删除的元素返回回来</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 删除自己: 节点.remove(); ie8+</span></span><br><span class="line"><span class="comment">// 点击div  删除整个ul</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ul.remove();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 删除子节点: 父节点.removeChild(子节点)   会把被删除的元素返回回来</span></span><br><span class="line"><span class="comment">// 点击btn 删除整行li</span></span><br><span class="line"><span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(btns);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">    btns[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 通过按钮 找到整个 li  li是btn的直接父元素</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.parentNode);</span><br><span class="line">        <span class="keyword">var</span> a = ul.removeChild(<span class="built_in">this</span>.parentNode);</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h3><p>节点.cloneNode(布尔)</p><p>true: 克隆节点中的内容</p><p>false/不传: 不克隆节点中的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nli = <span class="built_in">this</span>.cloneNode(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(nli);</span><br><span class="line"><span class="comment">// 追加到ul中</span></span><br><span class="line">ul.appendChild(nli);</span><br></pre></td></tr></table></figure><h3 id="替换节点"><a href="#替换节点" class="headerlink" title="替换节点"></a>替换节点</h3><p>父节点.replaceChild(新节点, 参考节点)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(box);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">li.innerHTML = <span class="string">&#x27;新内容&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">ul.replaceChild(li, box);</span><br></pre></td></tr></table></figure><h3 id="操作属性"><a href="#操作属性" class="headerlink" title="操作属性"></a>操作属性</h3><p>\1. 获取: var 变量 = 元素. 属性名; var 变量 = 元素[‘属性名’]</p><p>\2. 设置: 元素. 属性名 = 值; 元素[‘属性名’] = 值; 设置布尔值 读取到的就是布尔</p><p>[]里直接写属性名需要加引号 如果是变量不加引号</p><p>问题: 获取属性: 不能获取直接写在标签上的自定义属性  设置属性: 通过js设置的自定义属性在标签上看不到, 可以正常获取和设置操作所有属性, class直接使用</p><p>\3. 获取: 节点.getAttribute(‘属性名’)</p><p>\4. 设置: 节点.setAttribute(‘属性名’, ‘属性值’)</p><p>​    所有的值都是字符串 设置后面的属性会覆盖前面</p><p>\5. 移除:</p><p>​    节点. 属性名 = null/‘’</p><p>​    节点.removeAttribute(‘属性名’)</p><p>一般操作属性都可以直接使用以上方式, 如果只设置属性名就起作用的属性(checked\selected\loop\muted..)用点和[]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    操作属性:</span></span><br><span class="line"><span class="comment">        1. 获取: var 变量 = 元素.属性名;  var 变量 = 元素[&#x27;属性名&#x27;];</span></span><br><span class="line"><span class="comment">        2. 设置: 元素.属性名 = 值; 元素[&#x27;属性名&#x27;] = 值;  设置布尔值 读取到的就是布尔</span></span><br><span class="line"><span class="comment">        []里直接写属性名需要加引号 如果是变量不加引号</span></span><br><span class="line"><span class="comment">        问题: 获取属性: 不能获取直接写在标签上的自定义属性  设置属性: 通过js设置的自定义属性在标签上看不到, 可以正常获取和设置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(div.id);</span><br><span class="line"><span class="built_in">console</span>.log(div.className);</span><br><span class="line"><span class="built_in">console</span>.log(div.tag); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(div[<span class="string">&#x27;tag&#x27;</span>]); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">div.ttt = <span class="string">&#x27;1234&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    操作所有属性, class直接使用</span></span><br><span class="line"><span class="comment">    3. 获取: 节点.getAttribute(&#x27;属性名&#x27;);</span></span><br><span class="line"><span class="comment">    4. 设置: 节点.setAttribute(&#x27;属性名&#x27;, &#x27;属性值&#x27;);</span></span><br><span class="line"><span class="comment">        所有的值都是字符串 设置后面的属性会覆盖前面</span></span><br><span class="line"><span class="comment">    5. 移除: </span></span><br><span class="line"><span class="comment">        节点.属性名 = null/&#x27;&#x27;;</span></span><br><span class="line"><span class="comment">        节点.removeAttribute(&#x27;属性名&#x27;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    一般操作属性都可以直接使用以上方式, 如果只设置属性名就起作用的属性(checked\selected\loop\muted\..)用点和[]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;class&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;tag&#x27;</span>)); <span class="comment">// abc123</span></span><br><span class="line">div.setAttribute(<span class="string">&#x27;txt&#x27;</span>, <span class="string">&#x27;123123&#x27;</span>);</span><br><span class="line">div.setAttribute(<span class="string">&#x27;tnt&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">div.setAttribute(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;wrap a b&#x27;</span>);</span><br><span class="line"></span><br><span class="line">div.id = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">div.removeAttribute(<span class="string">&#x27;id&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="快速获取表格"><a href="#快速获取表格" class="headerlink" title="快速获取表格"></a>快速获取表格</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表格</span></span><br><span class="line"><span class="keyword">var</span> table = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;table&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(table);</span><br><span class="line"><span class="comment">// 表格是由行组成, 行是由单元格, 表格不能直接获取单元格</span></span><br><span class="line"><span class="built_in">console</span>.log(table.tHead); <span class="comment">// 表格头</span></span><br><span class="line"><span class="built_in">console</span>.log(table.tFoot); <span class="comment">// 表格脚</span></span><br><span class="line"><span class="built_in">console</span>.log(table.tBodies); <span class="comment">// 表格体 --&gt; 集合</span></span><br><span class="line"><span class="built_in">console</span>.log(table.tBodies[<span class="number">0</span>]); <span class="comment">// 第一个表格体</span></span><br><span class="line"><span class="built_in">console</span>.log(table.rows); <span class="comment">// 表格中所有的行 头体脚 集合</span></span><br><span class="line"><span class="built_in">console</span>.log(table.tBodies[<span class="number">0</span>].rows); <span class="comment">// 第一个表格体所有的行</span></span><br><span class="line"><span class="built_in">console</span>.log(table.cells); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(table.rows[<span class="number">0</span>].cells); <span class="comment">// 获取表格中第一个行的所有的单元格</span></span><br><span class="line"><span class="built_in">console</span>.log(table.tBodies[<span class="number">0</span>].rows[<span class="number">0</span>].cells);</span><br></pre></td></tr></table></figure><h3 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h3><h4 id="form表单的事件"><a href="#form表单的事件" class="headerlink" title="form表单的事件"></a>form表单的事件</h4><p>提交: form元素.onsubmit = 函数;</p><p>重置: form元素.onreset = 函数;</p><p>在函数中默认返回值都是 return true;</p><p>return false: 禁止提交/重置</p><p>如果你不想表单发生重置或者提交的时候 在函数中设置return false;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">form.onsubmit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;是否提交&#x27;</span>);</span><br><span class="line">    <span class="comment">// return true;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">form.onreset = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;是否重置&#x27;</span>);</span><br><span class="line">    <span class="comment">// return true;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="表单元素事件"><a href="#表单元素事件" class="headerlink" title="表单元素事件"></a>表单元素事件</h4><p>输入框(常见):</p><p>onblur: 失去焦点</p><p>onfocus: 聚集焦点</p><p>onchange: 失去焦点且内容发生改变</p><p>边输入边触发: oninput(标准)/onpropertychange(ie8)</p><p>​    搜索提示\密码等级校验...</p><p>​    不建议单独使用, 一般需要结合防抖和节流来进行使用, 避免事件的频繁触发</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">form.user.onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.background = <span class="string">&#x27;orange&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">form.user.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.background = <span class="string">&#x27;skyblue&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">form.pass.onchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.background = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件可以连等</span></span><br><span class="line">form.pass.oninput = form.onpropertychange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.value);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2021/09/27/day10%E8%87%AA%E6%80%BB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JS学习第九天</title>
      <link>http://example.com/2021/09/26/day9%E8%87%AA%E6%80%BB/</link>
      <guid>http://example.com/2021/09/26/day9%E8%87%AA%E6%80%BB/</guid>
      <pubDate>Sun, 26 Sep 2021 08:01:58 GMT</pubDate>
      
      <description>&lt;p&gt;第九天学习了数组的迭代方法以及正则表达式。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>第九天学习了数组的迭代方法以及正则表达式。</p><span id="more"></span><h1 id="day9"><a href="#day9" class="headerlink" title="day9"></a>day9</h1><h2 id="数组的迭代方法"><a href="#数组的迭代方法" class="headerlink" title="数组的迭代方法"></a>数组的迭代方法</h2><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><p>对为数组的每一个项进行判断。看返回值，如果出现了false，就终止，如果一直是true，就会判断到结束为止。三个参数，v为数组的项，i为项的下标，a为整个数组 返回值为true或者false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;r&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> res = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">v, i, a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v, i, a);</span><br><span class="line">    <span class="keyword">return</span> v == <span class="string">&#x27;q&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><p>为数组的每一个项进行判断。看返回值，如果出现了true，就终止，如果一直是false，就会判断到结束为止。三个参数，v为数组的项，i为项的下标，a为整个数组 返回值为true或者false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res1 = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">v, i, a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v, i, a)</span><br><span class="line">    <span class="keyword">return</span> v == <span class="string">&#x27;e&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res1)</span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>对数组进行过滤，返回值为符合条件的值组成的数组，三个参数和上边一样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res2 = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">v, i, a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v, i, a);</span><br><span class="line">    <span class="keyword">return</span> i &gt; <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res2);</span><br></pre></td></tr></table></figure><h3 id="map-amp-forEach"><a href="#map-amp-forEach" class="headerlink" title="map&amp;forEach"></a>map&amp;forEach</h3><p>map和forEach都是for循环。前者会将每个函数的返回值组成新的数组返回 造成内存浪费<br>后者没有返回值，纯循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res3 = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">v, i, a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v, i, a);</span><br><span class="line">    <span class="keyword">return</span> v + v</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res4 = arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v, i, a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v, i, a)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res4);</span><br></pre></td></tr></table></figure><h2 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h2><p>用规定好的具有特定含义的字符组成的规则字符串，用来实现字符串的检索和替换</p><h3 id="创建正则"><a href="#创建正则" class="headerlink" title="创建正则"></a>创建正则</h3><h4 id="new关键字创建"><a href="#new关键字创建" class="headerlink" title="new关键字创建"></a>new关键字创建</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;web&#x27;</span>, <span class="string">&#x27;ig&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(reg); <span class="comment">// /web/gi</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> reg); <span class="comment">// object</span></span><br></pre></td></tr></table></figure><h4 id="字面量声明"><a href="#字面量声明" class="headerlink" title="字面量声明"></a>字面量声明</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/web/ig</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg1); <span class="comment">// /web/gi</span></span><br></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>无序<br>i:ignore case 忽略大小写<br>g:global 全局</p><h3 id="检索方法"><a href="#检索方法" class="headerlink" title="检索方法"></a>检索方法</h3><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><p>replace(要替换的字符/正则, 新字符/函数)<br>函数的返回值是替换的新字符<br>函数有个形参，是每次匹配到的结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;big01Big02bIg03biG04BIG05&#x27;</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="regexp">/big/ig</span></span><br><span class="line"><span class="comment">// console.log(str.replace(s1,&#x27;stone&#x27;));</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(s1, <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;s&#x27;</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h4 id="split"><a href="#split" class="headerlink" title="split"></a>split</h4><p>split 字符串.split(分隔符/正则)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;big01Big02bIg03biG04BIG05&#x27;</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="regexp">/\d/</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(s1))</span><br></pre></td></tr></table></figure><h4 id="search"><a href="#search" class="headerlink" title="search"></a>search</h4><p>替换indexOf 用正则查找，返回找到的符合正则的第一个位置上的下标，其他的特性一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;big01Big02bIg03biG04BIG05&#x27;</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="regexp">/big/ig</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(s1))</span><br></pre></td></tr></table></figure><h4 id="match"><a href="#match" class="headerlink" title="match"></a>match</h4><p>字符串.match(正则)<br>返回一个数组<br>单个匹配结果: [‘web’, index: 0, input: ‘web0web1web2web0web1’, groups: undefined]<br>多个匹配结果: [‘0’, ‘1’, ‘2’, ‘0’, ‘1’]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;web0web1web2web0web1&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/ig</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br></pre></td></tr></table></figure><h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h4><p>返回值与match单个返回值一样，没有就返回null<br>惰性，加g会从上次找到的位置开始 不加每次都从0开始<br>正则.lastIndex: 返回下一次正则匹配开始的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;bigstonebig0422&#x27;</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/big/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/big/g</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br></pre></td></tr></table></figure><h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><p>断字符串是否符合正则的字符，返回值为true和false<br>惰性，同上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;bigstonebig0422&#x27;</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/big/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;--------------------------------&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/big/g</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br></pre></td></tr></table></figure><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><p>一个元字符可以表示一类字符<br>一个元字符做匹配只能匹配一个字符</p><h4 id="点"><a href="#点" class="headerlink" title=". 点"></a>. 点</h4><p>除了换行以外的任意字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;\n一块大石头&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/./</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title="[][^]"></a>[][^]</h4><p>[] 字符集 匹配[]中的任意一个字符 [^]非字符集 匹配不在[^]中的任意一个字符<br>0-9表示0123456789 a-z表示小写字母 A-Z表示大写字母 三个可以写在一起</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;bigstone4228&#x27;</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[123456]/</span></span><br><span class="line"><span class="keyword">var</span> regg = <span class="regexp">/[^123456]/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str), regg.exec(str));</span><br></pre></td></tr></table></figure><h4 id="w-W"><a href="#w-W" class="headerlink" title="\w \W"></a>\w \W</h4><p>匹配数字字母下划线任意的一个 \W不匹配前边提到的那几个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;_bigstone4228!&#x27;</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w/</span></span><br><span class="line"><span class="keyword">var</span> regg = <span class="regexp">/\W/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str), regg.exec(str));</span><br></pre></td></tr></table></figure><h4 id="d-D"><a href="#d-D" class="headerlink" title="\d \D"></a>\d \D</h4><p>\d 匹配的是数字，\D匹配的是非数字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;bigstone422&#x27;</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/</span></span><br><span class="line"><span class="keyword">var</span> regg = <span class="regexp">/\D/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str), str.match(regg), regg.exec(str));</span><br></pre></td></tr></table></figure><h4 id="s-S"><a href="#s-S" class="headerlink" title="\s \S"></a>\s \S</h4><p>\s 匹配空格 \S不匹配空格</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;_bi gstone4228!&#x27;</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\s/</span></span><br><span class="line"><span class="keyword">var</span> regg = <span class="regexp">/\S/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str), regg.exec(str));</span><br></pre></td></tr></table></figure><h4 id="b-B"><a href="#b-B" class="headerlink" title="\b \B"></a>\b \B</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;you are a beautiful girl&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\ba\b/</span>;</span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/\ba\B/</span>;</span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/\Ba\B/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str), reg1.exec(str), reg2.exec(str));</span><br></pre></td></tr></table></figure><h4 id="-1"><a href="#-1" class="headerlink" title="^$"></a>^$</h4><p>^a: 开头 以a为开头的a   a$: 以a为结尾的a<br>一起用可以限制长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;we are web0712&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^w/</span>;</span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/\d$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str), reg1.exec(str));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 银行卡密码正则:</span></span><br><span class="line"><span class="comment">// 6位</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d\d\d\d\d\d$/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br></pre></td></tr></table></figure><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><h4 id="？"><a href="#？" class="headerlink" title="？"></a>？</h4><p>匹配0个或者1个a  只匹配字符串的第一项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;bigstone422&#x27;</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d?/</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[a-z]?/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br></pre></td></tr></table></figure><h4 id="-2"><a href="#-2" class="headerlink" title="*"></a>*</h4><p>a* : 匹配0个或者 连续 多个a 尽可能多的做匹配 只匹配字符串的第一项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;wertyuiodfghjk23456789sdfghj44567&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d*/</span>;</span><br><span class="line"><span class="comment">// var reg = /[a-z]*/;</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br></pre></td></tr></table></figure><h4 id="-3"><a href="#-3" class="headerlink" title="+"></a>+</h4><p>匹配连续多个a  至少匹配1个  尽可能多的做匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;wertyuiodfghjk23456789sdfghj44567&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d+/</span>;</span><br><span class="line"><span class="comment">// var reg = /[a-z]+/;</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br></pre></td></tr></table></figure><h4 id="m-n"><a href="#m-n" class="headerlink" title="{m, n}"></a>{m, n}</h4><p>a{m, n} : 匹配至少m次最多n次的a  尽可能多的做匹配<br>a{m, } : 匹配至少m次<br>a{n} : 只匹配n次<br>, 后面绝对不能加空格</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;wtyuiosghjkxcvbnmsdxcvb&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[a-z]&#123;5,10&#125;/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str)); <span class="comment">// wtyuiosghj</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[a-z]&#123;1,&#125;/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str)); <span class="comment">// wtyuiosghjkxcvbnmsdxcvb</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[a-z]&#123;10&#125;/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str)); <span class="comment">// wtyuiosghj</span></span><br></pre></td></tr></table></figure><h3 id="或和分组"><a href="#或和分组" class="headerlink" title="或和分组"></a>或和分组</h3><h4 id="-4"><a href="#-4" class="headerlink" title="|"></a>|</h4><p>| 或 匹配|左边或者右边</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;web0712web1web2&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/web1|web2/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br></pre></td></tr></table></figure><h4 id="-5"><a href="#-5" class="headerlink" title="()"></a>()</h4><p>() 和 提高匹配的层级<br>()匹配到的结果可以通过其他属性得到<br>$1$2: 获取第几个()匹配到的结果 RegExp.$1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;web2web0712web1&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/web(1|2)/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$1)</span><br><span class="line"><span class="comment">//手机号码加密</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="string">&#x27;17838660443&#x27;</span></span><br><span class="line"><span class="keyword">var</span> teg = <span class="regexp">/^([1][3-9]\d)(\d&#123;4&#125;)(\d&#123;4&#125;)/</span></span><br><span class="line"><span class="built_in">console</span>.log(num.replace(teg, <span class="string">&#x27;$1****$3&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="特殊"><a href="#特殊" class="headerlink" title="特殊"></a>特殊</h3><h4 id="-6"><a href="#-6" class="headerlink" title="(?:)"></a>(?:)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;web4web2&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/web(?:1|2)/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br></pre></td></tr></table></figure><h4 id="-7"><a href="#-7" class="headerlink" title="(?=)"></a>(?=)</h4><p>(?=b) : 匹配后面必须跟b的a</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;webabcweb123&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/web(?=\d)/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br></pre></td></tr></table></figure><h4 id="-8"><a href="#-8" class="headerlink" title="(?!)"></a>(?!)</h4><p>a(?!b) : 匹配 后面 不是 b 的 a<br>使用: 排除条件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;webabcweb123&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/web(?!\d)/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2021/09/26/day9%E8%87%AA%E6%80%BB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JS学习第八天</title>
      <link>http://example.com/2021/09/23/day8%E8%87%AA%E6%80%BB/</link>
      <guid>http://example.com/2021/09/23/day8%E8%87%AA%E6%80%BB/</guid>
      <pubDate>Thu, 23 Sep 2021 13:56:05 GMT</pubDate>
      
      <description>&lt;p&gt;第八天学习了数组对象以及操作数组的方法。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>第八天学习了数组对象以及操作数组的方法。</p><span id="more"></span><h1 id="day8"><a href="#day8" class="headerlink" title="day8"></a>day8</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>用来储存不定数量不定类型的数据的容器</p><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 字面量创建</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">43</span>, <span class="number">64</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr); <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. new关键字创建</span></span><br><span class="line"><span class="comment">// var 变量 = new Array(...data);</span></span><br><span class="line"><span class="comment">// 注意: 当参数只有一个且是数字, 表示数组的长度</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr2[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><p>获取数组长度 数组.length</p><p>设置数组长度，如果长度比初始大，多出来的用undefined填充，如果比初始小，多余的就会被删除即使后边再被扩大也不会恢复。。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr3.length); <span class="comment">// 9</span></span><br><span class="line">arr3.length = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr3);</span><br><span class="line">arr3.length = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr3);</span><br></pre></td></tr></table></figure><h3 id="复杂与基础"><a href="#复杂与基础" class="headerlink" title="复杂与基础"></a>复杂与基础</h3><p>基础：数据比较单一，声明和储存都在栈中执行<br>复杂：数据比较复杂，声明和地址都存储在栈，具体数据存储在堆</p><h3 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h3><p>出现在引用数据类型</p><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>地址的赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="keyword">var</span> brr = arr;</span><br><span class="line"><span class="built_in">console</span>.log(brr);</span><br><span class="line"><span class="comment">//判断引用数据类型是否是同一个地址的数据 用 == 判断</span></span><br><span class="line"><span class="built_in">console</span>.log(arr == brr); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p> 在堆中在划一块，重新存储对应位置的每一个数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> crr = [];</span><br><span class="line"><span class="comment">// 将arr的每一个数据 存到 crr中   对应位置: 下标一致</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    crr[i] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(crr);</span><br><span class="line"><span class="built_in">console</span>.log(crr == arr); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="添加删除"><a href="#添加删除" class="headerlink" title="添加删除"></a>添加删除</h3><p>数组的方法大部分都是在原来数组上进行直接操作, 会改变原数组。</p><h4 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h4><p>在数组的末尾添加一项或者多项, 返回添加数据后的数组的新长度<br>数组.push()</p><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p>在数组的末尾删除一项, 返回被删除的项<br>数组.pop()</p><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h4><p>在数组的首位添加一项或者多项, 返回添加数据后的数组的新长度<br>数组.unshift()</p><h4 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h4><p>在数组的首位删除一项, 返回被删除的项<br>数组.shift()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment">//push() 给数组的末尾添加一个或者多个项，返回值为新的数组的长度</span></span><br><span class="line"><span class="keyword">var</span> a = arr.push(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr, a);</span><br><span class="line"><span class="comment">//pop()删除末尾的项，只删一个，返回值为删除的项</span></span><br><span class="line"><span class="keyword">var</span> b = arr.pop()</span><br><span class="line"><span class="built_in">console</span>.log(arr, b);</span><br><span class="line"><span class="comment">//unshift() 给数组的头部添加一个或者多个项，返回值为新的数组长度</span></span><br><span class="line"><span class="keyword">var</span> c = arr.unshift(<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr, c)</span><br><span class="line"><span class="comment">//shift() 删除头部的第一个项，只删一个，返回值为被删除的项</span></span><br><span class="line"><span class="keyword">var</span> d = arr.shift()</span><br><span class="line"><span class="built_in">console</span>.log(arr, d);</span><br></pre></td></tr></table></figure><h4 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h4><p>增删改, 返回被删除的项组成的新数组<br>语法: 数组.splice(起始下标, 删除的个数, [….data])<br>增: 数组.splice(起始下标, 删除个数, …data)<br>删除: 数组.splice(起始下标, 删除个数)<br>替换: 数组.splice(起始下标, 删除个数, …data)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">54</span>, <span class="number">12</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment">//splice的增加项的用法，增加的项可以有多个</span></span><br><span class="line"><span class="keyword">var</span> a = arr.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr, a);</span><br><span class="line"><span class="comment">//splice的删除项的用法，一次可以删多个，返回值是被删除的值组成的新的数组</span></span><br><span class="line"><span class="keyword">var</span> b = arr.splice(<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr, b)</span><br><span class="line"><span class="comment">//splice的改变项的用法，一次可以改多个。</span></span><br><span class="line"><span class="keyword">var</span> c = arr.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr, c);</span><br><span class="line"><span class="comment">//去重</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] === arr[j]) &#123;</span><br><span class="line">            arr.splice(j, <span class="number">1</span>)</span><br><span class="line">            j--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">8</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>拼接数组和项, 返回新数组<br>数组.concat(data)</p><h4 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h4><p>截取 用法与字符串一模一样, 返回截取出来的新数组<br>数组.slice([起始下标], [结束下标])</p><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><p>数组翻转, 改变原数组, 具有返回值, 返回翻转以后的数组<br>数组.reverse()</p><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p>将数组按照拼接符连接起来, 返回字符串<br>数组.join(连接符) 连接符可以是一切字符, 默认以, 作为连接符</p><h4 id="indexOf-lastIndexOf"><a href="#indexOf-lastIndexOf" class="headerlink" title="indexOf()/lastIndexOf()"></a>indexOf()/lastIndexOf()</h4><p>查找对应的项在数组中出现的位置，如果有返回下标，如果没有返回-1<br>与字符串一致<br>查找的项必须和数组的项 全等 才能被找到</p><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p>默认按照字符串的排序规则进行排序<br>数组.sort([函数])<br>return a - b; 从小到大<br>return b - a; 从大到小</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//concat 拼接数组和项，返回新的数组，原数组不会改变</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    brr = [<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">var</span> crr = arr.concat(<span class="number">4</span>, <span class="string">&#x27;g&#x27;</span>, brr)</span><br><span class="line"><span class="built_in">console</span>.log(crr);</span><br><span class="line"><span class="comment">//slice 截取，用法跟在字符串中的用法一模一样，返回的是截取后获得的数组，原数组不会改变</span></span><br><span class="line"><span class="built_in">console</span>.log(crr.slice());</span><br><span class="line"><span class="built_in">console</span>.log(crr.slice(<span class="number">4</span>));</span><br><span class="line"><span class="built_in">console</span>.log(crr.slice(<span class="number">4</span>, <span class="number">6</span>));</span><br><span class="line"><span class="built_in">console</span>.log(crr.slice(<span class="number">6</span>, <span class="number">4</span>));</span><br><span class="line"><span class="comment">//join 将数组按照所提供的拼接字符给连接起来，返回的是字符串，如果不给字符，默认用,（逗号）拼接。</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;小桥&#x27;</span>, <span class="string">&#x27;流水&#x27;</span>, <span class="string">&#x27;人家&#x27;</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a.join());</span><br><span class="line"><span class="built_in">console</span>.log(a.join(<span class="string">&#x27;跟&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(a.join(<span class="string">&#x27;&amp;&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(a.join(<span class="number">2</span>));</span><br><span class="line"><span class="comment">//reverse 反转数组,会改变原数组，返回的值为改变之后的数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="keyword">var</span> a1 = arr.reverse()</span><br><span class="line"><span class="built_in">console</span>.log(a1, arr);</span><br><span class="line"><span class="comment">//reverse与split结合可以实现反转字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;bigStone 422&#x27;</span></span><br><span class="line"><span class="keyword">var</span> s1 = str.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s1);</span><br><span class="line"><span class="comment">//indexOf与lastIndexOf用法与字符串中的一致。</span></span><br><span class="line"><span class="keyword">var</span> a2 = [<span class="string">&#x27;1&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;1&#x27;</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a2.indexOf(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(a2.lastIndexOf(<span class="string">&#x27;1&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(a2.lastIndexOf(<span class="string">&#x27;2&#x27;</span>));</span><br><span class="line"><span class="comment">//利用indexOf去重</span></span><br><span class="line"><span class="keyword">var</span> a3 = [<span class="number">22</span>, <span class="number">32</span>, <span class="number">45</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">32</span>, <span class="number">22</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">90</span>]</span><br><span class="line"><span class="keyword">var</span> a4 = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">of</span> a3) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a4.indexOf(i) == -<span class="number">1</span>) &#123;</span><br><span class="line">        a4.push(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a3);</span><br><span class="line"><span class="built_in">console</span>.log(a4);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    sort默认的是比较ASCII的大小来进行的排序。因此，如果要判断两位寄以上的数字时需要给参数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    arr.push(randomInt(<span class="number">0</span>, <span class="number">100</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="built_in">console</span>.log(arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 从小到大排序</span></span><br><span class="line">    <span class="comment">// return a-b;</span></span><br><span class="line">    <span class="comment">//从大到小排序</span></span><br><span class="line">    <span class="keyword">return</span> b - a</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h4 id="中文比较-localeCompare"><a href="#中文比较-localeCompare" class="headerlink" title="中文比较 localeCompare"></a>中文比较 localeCompare</h4><p>比较字符是否在另一个字符之前或者之后<br>字符a.localeCompare(字符b)<br>字符a 在 字符b 之前 返回 -1<br>字符a 和 字符b 完全一致 返回 0<br>字符a 在 字符b 之后 返回 1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    a.localeCompare(b)</span></span><br><span class="line"><span class="comment">    返回值-1表示 a在b前边</span></span><br><span class="line"><span class="comment">    1表示a在b后边</span></span><br><span class="line"><span class="comment">    0表示a和b一致</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;李四&#x27;</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&#x27;王五&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(b.localeCompare(a));</span><br><span class="line"><span class="built_in">console</span>.log(a.localeCompare(b));</span><br><span class="line"><span class="built_in">console</span>.log(b.localeCompare(b));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用姓名升序排序 a---z</span></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x.name, y.name);</span><br><span class="line">    <span class="keyword">return</span> x.name.localeCompare(y.name);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2021/09/23/day8%E8%87%AA%E6%80%BB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JS学习第七天</title>
      <link>http://example.com/2021/09/23/day7%E8%87%AA%E6%80%BB/</link>
      <guid>http://example.com/2021/09/23/day7%E8%87%AA%E6%80%BB/</guid>
      <pubDate>Thu, 23 Sep 2021 00:43:11 GMT</pubDate>
      
      <description>&lt;p&gt;第七天学习了Math对象，Date对象，还有操作字符串的方法。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>第七天学习了Math对象，Date对象，还有操作字符串的方法。</p><span id="more"></span><h1 id="day7"><a href="#day7" class="headerlink" title="day7"></a>day7</h1><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>在js中，万物皆对象。分为：本地、内置、自定义、宿主、全局</p><h3 id="内部"><a href="#内部" class="headerlink" title="内部"></a>内部</h3><p>Number String Boolean Object Array Function RegExp Date Error</p><h3 id="内置"><a href="#内置" class="headerlink" title="内置"></a>内置</h3><p>在页面加载完成后，已经实例化的对象。例如：Global Math</p><h3 id="宿主"><a href="#宿主" class="headerlink" title="宿主"></a>宿主</h3><p>DOM和BOM</p><h3 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h3><p>window</p><h2 id="api"><a href="#api" class="headerlink" title="api"></a>api</h2><p>application programming Interface 应用程序编程接口<br>已经封装好的可以直接使用的函数，直接调用实现功能</p><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.PI); <span class="comment">//pi就是圆周率</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">34.43</span>)); <span class="comment">//小数向下取整 34</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">56.65</span>)); <span class="comment">//小数向上取整 57</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">44.44</span>)); <span class="comment">//四舍五入 44</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">55.55</span>)); <span class="comment">//56</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">44</span>, <span class="number">75</span>, <span class="number">72</span>, <span class="number">47</span>, <span class="number">78</span>)) <span class="comment">//最大值78</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">44</span>, <span class="number">75</span>, <span class="number">72</span>, <span class="number">47</span>, <span class="number">78</span>)) <span class="comment">//最小值1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">34</span>, <span class="number">4</span>)); <span class="comment">//34的4次方</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sqrt(<span class="number">81</span>)); <span class="comment">//81开根号 9</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(-<span class="number">9</span>)); <span class="comment">//绝对值 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//0-1之间的随机数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.random())</span><br><span class="line"><span class="comment">//0-n之间的随机数 Math.random*n</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.random() * <span class="number">44</span>);</span><br><span class="line"><span class="comment">//n-m之间的随机数 Math.random*(m-n)+n;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.random() * (<span class="number">43</span> - <span class="number">34</span>) + <span class="number">34</span>)</span><br></pre></td></tr></table></figure><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><h3 id="创建当前时间"><a href="#创建当前时间" class="headerlink" title="创建当前时间"></a>创建当前时间</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> date); <span class="comment">// object</span></span><br></pre></td></tr></table></figure><h3 id="创建其他时间"><a href="#创建其他时间" class="headerlink" title="创建其他时间"></a>创建其他时间</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用 , 直接分割   月份: 0-11 表示 1-12 月</span></span><br><span class="line"><span class="keyword">var</span> d1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2021</span>, <span class="number">9</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> d1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2021</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">13</span>, <span class="number">13</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//传 字符串 年月日中间可以用任意特殊英文符号进行分割 空格 , / $  时分秒 用 时:分: 秒</span></span><br><span class="line"><span class="comment">// 字符串 月份不减</span></span><br><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2021, 10, 1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2021, 10, 1 23:23:23&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2021 10 1 23:23:23&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2021/10/2 23:23:23&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2021-10-3 23:23:23&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2021_10_3 23:23:23&#x27;</span>); <span class="comment">// Invalid Date 不可用的时间 _中文符号</span></span><br><span class="line"><span class="built_in">console</span>.log(d2);</span><br></pre></td></tr></table></figure><h3 id="获取特定格式时间"><a href="#获取特定格式时间" class="headerlink" title="获取特定格式时间"></a>获取特定格式时间</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dd = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> dd = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(dd);</span><br><span class="line"><span class="built_in">console</span>.log(dd.toString(), <span class="keyword">typeof</span> dd.toString()); <span class="comment">// 字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(dd.toLocaleString()); <span class="comment">// 本地字符串日期  2021/9/22 上午11:35:10</span></span><br><span class="line"><span class="built_in">console</span>.log(dd.toLocaleDateString()); <span class="comment">// 年月日 2021/9/22</span></span><br><span class="line"><span class="built_in">console</span>.log(dd.toLocaleTimeString()); <span class="comment">// 时分秒 12小时 上午11:36:30</span></span><br></pre></td></tr></table></figure><h3 id="获取单个时间"><a href="#获取单个时间" class="headerlink" title="获取单个时间"></a>获取单个时间</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(d)</span><br><span class="line"><span class="built_in">console</span>.log(d.getFullYear()) <span class="comment">//年</span></span><br><span class="line"><span class="built_in">console</span>.log(d.getMonth()) <span class="comment">//月</span></span><br><span class="line"><span class="built_in">console</span>.log(d.getDate()) <span class="comment">//日</span></span><br><span class="line"><span class="built_in">console</span>.log(d.getDay()) <span class="comment">//周</span></span><br><span class="line"><span class="built_in">console</span>.log(d.getHours()) <span class="comment">//时</span></span><br><span class="line"><span class="built_in">console</span>.log(d.getMinutes()) <span class="comment">//分</span></span><br><span class="line"><span class="built_in">console</span>.log(d.getSeconds()) <span class="comment">//秒</span></span><br><span class="line"><span class="built_in">console</span>.log(d.getTime()) <span class="comment">//时间戳</span></span><br></pre></td></tr></table></figure><h3 id="moment"><a href="#moment" class="headerlink" title="moment"></a>moment</h3><p>moment.js: 专门处理日期的js插件库<br>下载 ‘<a href="http://momentjs.cn/&#39;">http://momentjs.cn/&#39;</a><br>moment.js : 格式文档 学习<br>moment.min.js : 压缩文档 工作</p><p>YYYY: 年<br>MM: 月<br>DD: 日期<br>d: 星期<br>HH: 时<br>mm: 分<br>ss: 秒<br>X: 所有的秒 距离1970-1-1的毫秒/1000</p><p>如果时个位数，自动添加0</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建moment时间对象</span></span><br><span class="line"><span class="keyword">var</span> dd = moment();</span><br><span class="line"><span class="built_in">console</span>.log(dd);</span><br><span class="line"></span><br><span class="line"><span class="comment">// format: 格式日期</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    YYYY: 年</span></span><br><span class="line"><span class="comment">    MM: 月</span></span><br><span class="line"><span class="comment">    DD: 日期</span></span><br><span class="line"><span class="comment">    d: 星期</span></span><br><span class="line"><span class="comment">    HH: 时</span></span><br><span class="line"><span class="comment">    mm: 分</span></span><br><span class="line"><span class="comment">    ss: 秒</span></span><br><span class="line"><span class="comment">    X: 所有的秒 距离1970-1-1的毫秒/1000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    前导0 自动添加</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(dd.format(<span class="string">&#x27;YYYY&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(dd.format(<span class="string">&#x27;MM&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(dd.format(<span class="string">&#x27;DD&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(dd.format(<span class="string">&#x27;d&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(dd.format(<span class="string">&#x27;HH&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(dd.format(<span class="string">&#x27;mm&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(dd.format(<span class="string">&#x27;ss&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(dd.format(<span class="string">&#x27;X&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在页面中显示当前是 xxxx年xx月xx日 星期x x:x:x</span></span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = dd.format(<span class="string">&#x27;YYYY年MM月DD日 星期d HH:mm:ss&#x27;</span>);</span><br><span class="line"><span class="comment">// 每隔1s自动更新一次</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dd = moment();</span><br><span class="line">    <span class="built_in">console</span>.log(dd);</span><br><span class="line">    <span class="built_in">document</span>.body.innerHTML = dd.format(<span class="string">&#x27;YYYY年MM月DD日 星期d HH:mm:ss&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h4 id="字面量声明"><a href="#字面量声明" class="headerlink" title="字面量声明"></a>字面量声明</h4><p>包装类对象 不是真正的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;12345a&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="new关键字创建"><a href="#new关键字创建" class="headerlink" title="new关键字创建"></a>new关键字创建</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;asddhj&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str1); <span class="comment">// object</span></span><br></pre></td></tr></table></figure><h3 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(str1.length); <span class="comment">// 长度</span></span><br></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;qwertyui2353423f&#x27;</span></span><br><span class="line"><span class="comment">//charAt 指定下标对应的字符</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//charCodeAt 指定下标对应的字符的ASCII码</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charCodeAt(<span class="number">5</span>));</span><br><span class="line"><span class="comment">//indexOf 指定字符在字符串中出现的位置，返回值为下标。找到第一个存在的位置就返回，找不到时返回-1，第二个参数为指定初始下标</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&#x27;2&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&#x27;2&#x27;</span>, <span class="number">9</span>))</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&#x27;yu2&#x27;</span>))</span><br><span class="line"><span class="comment">//lastIndexOf 指定字符在字符串中最后出现的位置，返回值为下标，其他的与indexOf一样，不同的是，此方法是从右往左找</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&#x27;2&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&#x27;2&#x27;</span>, <span class="number">12</span>))</span><br></pre></td></tr></table></figure><h3 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;qwert132459jbnv&#x27;</span></span><br><span class="line"><span class="comment">// substring 一个参数，从参数开始，截取到最后。两个参数，从第一个参数开始，截取到第二个参数，含头不含尾。如果结束下标小于起始下标。参数互换位置。出现负数会把参数替换为0</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">2</span>, <span class="number">6</span>))</span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">9</span>, <span class="number">6</span>))</span><br><span class="line"><span class="built_in">console</span>.log(str.substring(-<span class="number">9</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//slice 与上边不同的是，如果结束下标小于起始下标，返回空字符串，出现负数就是从右往左起的第几位。</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">5</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">5</span>, -<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//substr 一个参数，与上头两个一样，两个参数，从第一个参数起的位置，往后接第二个参数的个数的长度的字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">6</span>))</span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">6</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><h3 id="剩余的5个"><a href="#剩余的5个" class="headerlink" title="剩余的5个"></a>剩余的5个</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//replace 替换，replace(要替换的,被替换的),被替换的字符串如果不在里头，返回的是原字符串。</span></span><br><span class="line">       <span class="keyword">var</span> str=<span class="string">&#x27;I am here as always&#x27;</span></span><br><span class="line">       <span class="built_in">console</span>.log(str.replace(<span class="string">&#x27;am&#x27;</span>,<span class="string">&#x27;hahaha&#x27;</span>))</span><br><span class="line"></span><br><span class="line">       <span class="comment">//split 将字符串按照指定的分隔符进行分割。返回值是一个数组。</span></span><br><span class="line">       <span class="built_in">console</span>.log(str.split(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">       <span class="built_in">console</span>.log(str.split(<span class="string">&#x27;&#x27;</span>))<span class="comment">//给一个空字符的话就是把每一个字符作为数组里的一项，包括空格符。</span></span><br><span class="line">       <span class="built_in">console</span>.log(str.split())<span class="comment">//啥也不给的话就是将整个字符串作为数组里的一项</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//toUpperCase()小写转大写  toLowerCase()大写转小写</span></span><br><span class="line">       <span class="keyword">var</span> s1=<span class="string">&#x27;UiuiUIuI&#x27;</span></span><br><span class="line">       <span class="keyword">var</span> s2=<span class="string">&#x27;uIUIUIUi&#x27;</span></span><br><span class="line">       <span class="built_in">console</span>.log(s1.toUpperCase())</span><br><span class="line">       <span class="built_in">console</span>.log(s1.toLowerCase())</span><br><span class="line">       <span class="comment">//不区分大小写</span></span><br><span class="line">       <span class="built_in">console</span>.log(s1.toUpperCase()==s2.toUpperCase())</span><br><span class="line"></span><br><span class="line">       <span class="comment">//trim 去除字符串的左右空格</span></span><br><span class="line">       <span class="keyword">var</span> s3=<span class="string">&#x27;    (I am here as always)     &#x27;</span></span><br><span class="line">       <span class="built_in">console</span>.log(s3.trim())</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2021/09/23/day7%E8%87%AA%E6%80%BB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JS学习第六天</title>
      <link>http://example.com/2021/09/21/day06/</link>
      <guid>http://example.com/2021/09/21/day06/</guid>
      <pubDate>Tue, 21 Sep 2021 03:53:28 GMT</pubDate>
      
      <description>&lt;p&gt;第六天学习了定时器，并且封装了一个js移动动画函数。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>第六天学习了定时器，并且封装了一个js移动动画函数。</p><span id="more"></span><h1 id="day6"><a href="#day6" class="headerlink" title="day6"></a>day6</h1><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>定时器: 让一段代码等待一段时间或者每隔一段时间就执行一次的代码就是定时器</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="延迟定时器"><a href="#延迟定时器" class="headerlink" title="延迟定时器"></a>延迟定时器</h4><p>延迟: 让一段代码等待一段时间  setTimeout(函数, 时间); 时间单位: ms</p><p>​    等待 只执行一次的效果 使用延迟定时器</p><p>​    效果: 一次性广告 关不掉的广告</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    打开页面 等待3s后 显示img</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;img&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 等待 只执行一次的效果 使用延迟定时器</span></span><br><span class="line"><span class="built_in">setTimeout</span>(auto, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">auto</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    img.style.display = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="间隔定时器"><a href="#间隔定时器" class="headerlink" title="间隔定时器"></a>间隔定时器</h4><p>间隔: 每隔一段时间执行一次 setInterval(函数, 时间); 时间单位: ms</p><p>​    每隔  间隔  不间断重复的效果</p><p>​    效果: 计时器 倒计时 轮播图</p><p>1s = 1000ms</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 每隔一秒 让n自加1 输出</span></span><br><span class="line"><span class="comment">// 每隔  间隔  不间断重复的效果</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    n++;</span><br><span class="line">    <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="清除定时器"><a href="#清除定时器" class="headerlink" title="清除定时器"></a>清除定时器</h3><p>定时器一旦开启 不会自动清除 会造成内存泄漏<br>需要手动清除定时器<br>间隔: setInterval     clearInterval(唯一标识)<br>延迟: setTimeout      clearTimeout(唯一标识)<br>唯一标识 开启定时器后的返回值就是定时器的唯一标识<br>接收唯一标识：var 变量 = setTimeout/setInterval(); </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    n--;</span><br><span class="line">    <span class="comment">// 如果n等于0  清除定时器</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;这是间隔定时器&#x27;</span>, n);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(timer, <span class="string">&#x27;timer&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p> 一般封装定时器的时候 是将定时器的函数抽取成普通的函数<br>当遇到会频繁开启定时器的时候 先清除定时器</p><h2 id="封装的函数"><a href="#封装的函数" class="headerlink" title="封装的函数"></a>封装的函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元素位移的函数</span></span><br><span class="line"><span class="comment">//为定时器设置一个标时，由于一开始时没有使用定时器，所以赋值为null</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">ele, attr, step, end</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取当前图片所在的位置，并且转换为数字的格式</span></span><br><span class="line">    <span class="keyword">var</span> n = <span class="built_in">parseInt</span>(get_style(ele, attr))</span><br><span class="line">    <span class="comment">//判断，当前的位置如果小于目标位置，那就是加，如果当前位置小于目标位置那就是减。</span></span><br><span class="line">    step = n &lt; end ? step : -step;</span><br><span class="line">    <span class="comment">//先清除之前存在的定时器，防止每点击一下就会出现一个定时器</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">    <span class="comment">//创建定时器</span></span><br><span class="line">    timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//使位置每次加</span></span><br><span class="line">        n += step;</span><br><span class="line">        <span class="comment">//判断是否飞到头了，如果飞到头，就停止</span></span><br><span class="line">        <span class="keyword">if</span> ((n &gt;= end &amp;&amp; step &gt;= <span class="number">0</span>) || (n &lt;= end &amp;&amp; step &lt;= <span class="number">0</span>)) &#123;</span><br><span class="line">            n = end;</span><br><span class="line">            <span class="comment">//飞到终点，就清除当前的定时器</span></span><br><span class="line">            <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//改变图片的位置。</span></span><br><span class="line">        ele.style[attr] = n + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    &#125;, <span class="number">20</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2021/09/21/day06/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JS学习第五天</title>
      <link>http://example.com/2021/09/17/day5%E8%87%AA%E6%80%BB/</link>
      <guid>http://example.com/2021/09/17/day5%E8%87%AA%E6%80%BB/</guid>
      <pubDate>Fri, 17 Sep 2021 13:28:05 GMT</pubDate>
      
      <description>&lt;p&gt;第五天学习了获取函数样式、this、自定义属性、自定义索引等等。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>第五天学习了获取函数样式、this、自定义属性、自定义索引等等。</p><span id="more"></span><h1 id="day5"><a href="#day5" class="headerlink" title="day5"></a>day5</h1><h2 id="获取元素样式"><a href="#获取元素样式" class="headerlink" title="获取元素样式"></a>获取元素样式</h2><h3 id="基础获取"><a href="#基础获取" class="headerlink" title="基础获取"></a>基础获取</h3><p>标准浏览器(ie9, chrome, ff): getComputedStyle(元素).属性名<br>ie(ie8及以下): 元素.currentStyle.属性名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取div</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(div);</span><br><span class="line"><span class="comment">// 获取样式:</span></span><br><span class="line"><span class="comment">// 标准:</span></span><br><span class="line"><span class="comment">// var w = getComputedStyle(div).width;</span></span><br><span class="line"><span class="comment">// console.log(w);</span></span><br><span class="line"><span class="comment">// var h = getComputedStyle(div).height;</span></span><br><span class="line"><span class="comment">// console.log(h);</span></span><br><span class="line"><span class="built_in">console</span>.log(getComputedStyle); <span class="comment">// 标准: 函数  ie: undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(div.currentStyle); <span class="comment">// 标准: undefined ie: 对象</span></span><br><span class="line"><span class="comment">// ie:</span></span><br><span class="line"><span class="comment">// Cannot read properties of undefined (reading &#x27;width&#x27;): </span></span><br><span class="line"><span class="comment">// var w = div.currentStyle.width;</span></span><br><span class="line"><span class="comment">// console.log(w);</span></span><br></pre></td></tr></table></figure><h3 id="兼容"><a href="#兼容" class="headerlink" title="兼容"></a>兼容</h3><p>getComputedStyle: 函数  currentStyle: 对象</p><p>处理兼容: 一个函数 一个是对象/属性 可以用函数是否存在来做判断</p><p>如果函数 xx() 来做调用的话 判断的时候 window.xx 是否存在来做判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.getComputedStyle);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle)&#123;</span><br><span class="line">    <span class="comment">// 标准</span></span><br><span class="line">    <span class="keyword">var</span> w = getComputedStyle(div).width;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// ie</span></span><br><span class="line">    <span class="keyword">var</span> w = div.currentStyle.width;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(w);</span><br></pre></td></tr></table></figure><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">ele, attr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ele: 元素</span></span><br><span class="line">    <span class="comment">// attr: 属性</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.getComputedStyle) &#123;</span><br><span class="line">        <span class="comment">// 标准</span></span><br><span class="line">        <span class="keyword">var</span> w = getComputedStyle(ele)[attr];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> w = ele.currentStyle[attr];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(w);</span></span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装使用"><a href="#封装使用" class="headerlink" title="封装使用"></a>封装使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. 引入公用js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../fsy.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(div);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> w = getStyle(div, <span class="string">&#x27;width&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(w);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>this: 指代词, 在不同的位置有不同的含义</p><p>​    全局: window</p><p>​    普通函数: window</p><p>​    对象的方法: 当前对象</p><p>​    事件处理函数: 触发源 点谁就指向谁</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// window</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    abs: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.abs);</span><br><span class="line">obj.abs();</span><br><span class="line"></span><br><span class="line">lis[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this使用"><a href="#this使用" class="headerlink" title="this使用"></a>this使用</h3><h4 id="在for循环所嵌套的事件中-得不到正确的对象的时候-用this来指代"><a href="#在for循环所嵌套的事件中-得不到正确的对象的时候-用this来指代" class="headerlink" title="在for循环所嵌套的事件中, 得不到正确的对象的时候 用this来指代"></a>在for循环所嵌套的事件中, 得不到正确的对象的时候 用this来指代</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击每一个li 输出当前li的内容</span></span><br><span class="line"><span class="comment">// 1. 获取元素</span></span><br><span class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(lis);</span><br><span class="line"><span class="comment">// 2. 每一个</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++)&#123;</span><br><span class="line">    <span class="comment">// 3. 加事件</span></span><br><span class="line">    lis[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// 用this指代当前的触发源</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.innerHTML);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排他"><a href="#排他" class="headerlink" title="排他"></a>排他</h3><p>排他: 除了自己有特定效果之外 其他的都是默认样式</p><p>实现过程: 1. 所有元素都设置成默认样式</p><p>​        \2. 指定元素添加特定效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取元素</span></span><br><span class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(lis);</span><br><span class="line"><span class="comment">// 2. 每一个</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++)&#123;</span><br><span class="line">    <span class="comment">// 3. 加事件</span></span><br><span class="line">    lis[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 先去清除所有的li的字体颜色</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; lis.length; j++)&#123;</span><br><span class="line">            lis[j].className = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 让当前的li的颜色变成黑色</span></span><br><span class="line">        <span class="comment">// 找到当前li</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">        <span class="built_in">this</span>.className = <span class="string">&#x27;active&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>一般假定初始状态的时候 不会写太复杂的值 一般一个数字、或者 布尔值</p><p>假设内容 随意指定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;img&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(img);</span><br><span class="line"><span class="comment">// 不知道灯是什么状态 可以假设初始状态</span></span><br><span class="line"><span class="comment">// 一般假定初始状态的时候 不会写太复杂的值 一般一个数字、或者 布尔值</span></span><br><span class="line"><span class="comment">// 1--黑 2--亮  true--亮 false--黑</span></span><br><span class="line"><span class="keyword">var</span> tag = <span class="string">&#x27;dark&#x27;</span>; <span class="comment">// 假设内容 随意指定  dark--黑 light--亮</span></span><br><span class="line"><span class="comment">// 点击</span></span><br><span class="line">img.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.src); <span class="comment">// file:///Users/fushuangyu/Desktop/offcn/0712/day05/images/dark.jpg</span></span><br><span class="line">    <span class="keyword">if</span>(tag == <span class="string">&#x27;dark&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">// 灯是黑的 变亮</span></span><br><span class="line">        img.src = <span class="string">&#x27;./images/bright.jpg&#x27;</span>;</span><br><span class="line">        <span class="comment">// 更新状态</span></span><br><span class="line">        tag = <span class="string">&#x27;light&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        img.src = <span class="string">&#x27;./images/dark.jpg&#x27;</span>;</span><br><span class="line">        tag = <span class="string">&#x27;dark&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><p>属性: 写在起始标签上的 除了标签以外的 都是属性<br>固有属性: 规定好作用的 class id alt src…<br>自定义属性: 由程序员自己去设定的属性 tag<br>操作属性:<br>​1. 获取属性的值:<br>​   var 变量 = 元素.属性;<br>​   var 变量 = 元素[属性];<br>​2. 设置属性的值:<br>​   元素.属性名 = 值;<br>​   元素[属性名] = 值;<br><strong>直接写在html页面中的自定义属性通过上述两种方式不能获取</strong><br><strong>通过js设置给元素的自定义属性，在页面中看不到, 但是在js中可以正常操作</strong><br>多个元素之间的同名的属性 互相不影响</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取属性值</span></span><br><span class="line"><span class="built_in">console</span>.log(div.id);</span><br><span class="line"><span class="built_in">console</span>.log(div.tag); <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 2. 设置属性</span></span><br><span class="line">div.t = <span class="string">&#x27;abc123&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(div.t); <span class="comment">// abc123</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;img&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">img.t = <span class="string">&#x27;987654321&#x27;</span>;</span><br><span class="line"><span class="comment">// 多个元素之间的同名的属性 互相不影响</span></span><br><span class="line"><span class="built_in">console</span>.log(div.t, img.t);</span><br></pre></td></tr></table></figure><h2 id="自定义索引"><a href="#自定义索引" class="headerlink" title="自定义索引"></a>自定义索引</h2><p>在自定义属性中 存储下标 的行为 就是自定义索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 每一个</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++)&#123;</span><br><span class="line">    <span class="comment">// 存储自定义索引</span></span><br><span class="line">    btns[i].index = i;</span><br><span class="line">    <span class="comment">// 3. 加事件</span></span><br><span class="line">    btns[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到对应的颜色</span></span><br><span class="line">        <span class="comment">// 颜色和按钮的关系: 5个 </span></span><br><span class="line">        <span class="comment">// 按钮和颜色: 一一对应  下标是一致</span></span><br><span class="line">        <span class="comment">// 获取当前按钮的下标 ---&gt; 当前按钮的index属性的值</span></span><br><span class="line">        <span class="comment">// console.log(i);</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.index);</span><br><span class="line">        <span class="comment">// 通过下标获取对应的arr中的颜色</span></span><br><span class="line">        <span class="built_in">console</span>.log(arr[<span class="built_in">this</span>.index]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 颜色设置给body  快速获取页面body的方式: document.body</span></span><br><span class="line">        <span class="comment">// console.log(document.body);</span></span><br><span class="line">        <span class="built_in">document</span>.body.style.background = arr[<span class="built_in">this</span>.index];</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2021/09/17/day5%E8%87%AA%E6%80%BB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JS学习第四天</title>
      <link>http://example.com/2021/09/16/day4%E8%87%AA%E6%80%BB/</link>
      <guid>http://example.com/2021/09/16/day4%E8%87%AA%E6%80%BB/</guid>
      <pubDate>Thu, 16 Sep 2021 13:27:12 GMT</pubDate>
      
      <description>&lt;p&gt;第四天学习了函数，函数封装，作用域等等。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>第四天学习了函数，函数封装，作用域等等。</p><span id="more"></span><h1 id="day4"><a href="#day4" class="headerlink" title="day4"></a>day4</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>将具有独立功能的代码块整合命名的代码<br>作用：减少页面代码，提高页面的执行速度，页面结构更加清晰</p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>函数：由事件驱动的或者在需要的时候被调用的代码块<br>函数只声明不调用的话，没有任何效果。</p><p>声明函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line">fn();</span><br><span class="line"><span class="comment">//字面量声明</span></span><br><span class="line"><span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line">fn1();</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>函数名和变量名的命名规范是一致的。<br>区别：函数声明的方式调用可以在声明之前或者之后，字面量声明的方式调用只能在声明之后。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>当遇到不确定的值，就需要抽取成形参，在调用时，不同的数据传递进去。<br>形参：形式参数，写在function后边的()里，用来接收实际传递过来的数据。<br>实参：实际传递过来的数据，写在函数调用的()里。</p><p>arguments：存在于每一个函数中，是实参的集合</p><p>一般形参和实参一一对应。</p><h4 id="单个参数"><a href="#单个参数" class="headerlink" title="单个参数"></a>单个参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单个参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 求和</span></span><br><span class="line">    <span class="keyword">var</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 1 + 2 + 3 + 4 + ... + 100</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= a; i++)&#123;</span><br><span class="line">        <span class="comment">// s = s + i;</span></span><br><span class="line">        s += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(s);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">sum(<span class="number">100</span>);</span><br><span class="line">sum(<span class="number">1000</span>);</span><br><span class="line">sum(<span class="number">2000</span>);</span><br></pre></td></tr></table></figure><h4 id="多个参数"><a href="#多个参数" class="headerlink" title="多个参数"></a>多个参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 50-80  90-100 1000-10000</span></span><br><span class="line"><span class="comment">// 多个参数: 用,隔开</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum1</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 求和</span></span><br><span class="line">    <span class="keyword">var</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 1 + 2 + 3 + 4 + ... + 100</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = start; i &lt;= end; i++)&#123;</span><br><span class="line">        <span class="comment">// s = s + i;</span></span><br><span class="line">        s += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(s);</span><br><span class="line">&#125;;</span><br><span class="line">sum1(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">sum1(<span class="number">50</span>, <span class="number">80</span>);</span><br></pre></td></tr></table></figure><h4 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h4><p>如果参数个数不确定，形参和实参一个都不写，直接使用arguments。<br>它存在于每一个函数中，是实参的集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">// 将arguments中的每个数据加起来</span></span><br><span class="line">    <span class="keyword">var</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i]);</span><br><span class="line">        s += <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(s);</span><br><span class="line">&#125;</span><br><span class="line">sum2(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>);</span><br><span class="line">sum2(<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>);</span><br></pre></td></tr></table></figure><h4 id="形参和arguments的关系"><a href="#形参和arguments的关系" class="headerlink" title="形参和arguments的关系"></a>形参和arguments的关系</h4><p>两者互相影响</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, <span class="built_in">arguments</span>);</span><br><span class="line">    a = <span class="number">50</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a, <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a, <span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">fn(<span class="number">30</span>);</span><br></pre></td></tr></table></figure><h3 id="函数问题"><a href="#函数问题" class="headerlink" title="函数问题"></a>函数问题</h3><h4 id="形参实参不一一对应"><a href="#形参实参不一一对应" class="headerlink" title="形参实参不一一对应"></a>形参实参不一一对应</h4><p>形参&gt;实参：多余的形参就是undefined<br>实参&lt;形参：多余的实参不能通过形参获取。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b);</span><br><span class="line">&#125;;</span><br><span class="line">fn(<span class="number">10</span>); <span class="comment">// a = 10 b = undefined</span></span><br><span class="line">fn(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>); <span class="comment">// a = 10 b = 20</span></span><br></pre></td></tr></table></figure><h4 id="函数重名"><a href="#函数重名" class="headerlink" title="函数重名"></a>函数重名</h4><p>函数名重名：后边的覆盖前边的<br>函数和变量名重名：变量覆盖函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">a(); <span class="comment">// a1</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">30</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// b(); // b is not a function</span></span><br></pre></td></tr></table></figure><h4 id="函数封装"><a href="#函数封装" class="headerlink" title="函数封装"></a>函数封装</h4><ol><li>声明空函数</li><li>实现单个效果</li><li>调用</li><li>抽参</li><li>传参：把谁抽出来，把谁传进去</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOdd</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 0--10</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= a; i++)&#123;</span><br><span class="line">        <span class="comment">// 偶数: 被2整除 取余等于0</span></span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">getOdd(<span class="number">10</span>);</span><br><span class="line">getOdd(<span class="number">66</span>);</span><br><span class="line">getOdd(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><h3 id="参数的数据类型"><a href="#参数的数据类型" class="headerlink" title="参数的数据类型"></a>参数的数据类型</h3><p>所有的数据类型都可以作为参数，一般不用null和undefined作为参数，由于null和undefined不具有实际意义，所以一般不使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, <span class="keyword">typeof</span> a);</span><br><span class="line">&#125;</span><br><span class="line">getType(<span class="number">10</span>);</span><br><span class="line">getType(<span class="string">&#x27;中公&#x27;</span>);</span><br><span class="line">getType(<span class="literal">true</span>);</span><br><span class="line">getType(<span class="literal">null</span>);</span><br><span class="line">getType(<span class="literal">undefined</span>);</span><br><span class="line"><span class="keyword">var</span> m = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line">getType(m);</span><br><span class="line">getType([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">getType(fn);</span><br></pre></td></tr></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用：读（获取）、写（设置）<br>域：区域   作用域：变量和函数被读写的区域<br>es5中，作用域通过函数来划分，又叫做函数作用域。<br>全局作用域：script标签下，全局变量、全局函数、可以在整个js中被读写。<br>局部作用域：function的{}里。在局部作用域中，用var\function声明的变量和函数，叫做局部变量、局部函数，只在当前作用域起作用，如果出了{}会被销毁。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局作用域</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">10</span>; <span class="comment">// 全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 全局函数</span></span><br><span class="line">    <span class="comment">// 局部作用域</span></span><br><span class="line">    <span class="built_in">console</span>.log(n); <span class="comment">// 10</span></span><br><span class="line">    <span class="keyword">var</span> z = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(z); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(z); <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>js的一种查找机制，决定了变量和函数向上一级作用域查找的过程。<br>查找过程：先找自身作用域，如果自身作用域有，直接返回，如果自身没有，往上一级作用域查找，直到到全局作用域，如果全局作用域也没有，报错is not defined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">10</span>; <span class="comment">// 全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 局部作用域</span></span><br><span class="line">    <span class="keyword">var</span> z = <span class="number">20</span>; <span class="comment">// 局部变量</span></span><br><span class="line">    <span class="built_in">console</span>.log(n, z);  </span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>js在解析代码的时候，不是按照单纯的从上到下的顺序来执行</p><ol><li>预解析：找var、function，将var声明的变量的声明提到最前，function声明的函数整个存储在内存中</li><li>逐行解析：从上到下的顺序一行行执行代码。</li></ol><p>函数的形参在函数被调用的第一行代码优先执行, 形参接收实参, 执行函数体<br>函数每调用形成一个新的局部作用域, 代码的解析过程遵循预解析过程</p><h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    解析过程:</span></span><br><span class="line"><span class="comment">        var a;</span></span><br><span class="line"><span class="comment">        console.log(a);</span></span><br><span class="line"><span class="comment">        a = 10;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="function"><a href="#function" class="headerlink" title="function"></a>function</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;函数1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;函数2&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    解析过程: </span></span><br><span class="line"><span class="comment">    function sum() &#123;</span></span><br><span class="line"><span class="comment">        console.log(&#x27;函数1&#x27;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    function sum() &#123;</span></span><br><span class="line"><span class="comment">        console.log(&#x27;函数2&#x27;);</span></span><br><span class="line"><span class="comment">    &#125;;</span></span><br><span class="line"><span class="comment">    console.log(sum); 函数2</span></span><br><span class="line"><span class="comment">    console.log(sum); 函数2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="var和function"><a href="#var和function" class="headerlink" title="var和function"></a>var和function</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var function 函数声明 字面量声明的区别</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    解析过程:</span></span><br><span class="line"><span class="comment">        var fn;</span></span><br><span class="line"><span class="comment">        function fn() &#123;</span></span><br><span class="line"><span class="comment">            console.log(1);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        fn = &#x27;abc&#x27;;</span></span><br><span class="line"><span class="comment">        console.log(fn); abc</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="形参"><a href="#形参" class="headerlink" title="形参"></a>形参</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传参</span></span><br><span class="line"><span class="comment">// 函数的形参在函数被调用的第一行代码优先执行, 形参接收实参, 执行函数体</span></span><br><span class="line"><span class="comment">// 函数每调用形成一个新的局部作用域, 代码的解析过程遵循预解析过程</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">30</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;;</span><br><span class="line">fun(<span class="number">10</span>);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    解析过程:</span></span><br><span class="line"><span class="comment">        function fun(a) &#123;</span></span><br><span class="line"><span class="comment">            console.log(a);</span></span><br><span class="line"><span class="comment">            var a = 30;</span></span><br><span class="line"><span class="comment">            console.log(a);</span></span><br><span class="line"><span class="comment">            解析过程:</span></span><br><span class="line"><span class="comment">                var a;--&gt;声明形参 </span></span><br><span class="line"><span class="comment">                var a;</span></span><br><span class="line"><span class="comment">                a = 10; ---&gt; 接收实参</span></span><br><span class="line"><span class="comment">                console.log(a); // 10</span></span><br><span class="line"><span class="comment">                a = 30;</span></span><br><span class="line"><span class="comment">                console.log(a); // 30</span></span><br><span class="line"><span class="comment">        &#125;;</span></span><br><span class="line"><span class="comment">        fun(10);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>函数在执行的时候 就像一个小黑屋 里面的数据不能直接出来 如果想要出来需要越狱</p><p>函数的返回值: 每个函数执行后都会有返回值, 默认返回值 undefined就是函数调用的结果<br>接收函数的返回值: var 变量 = 函数();<br>想要将函数内的数据 在函数外能使用 需要将函数内的数据设置成返回值返回回来<br>设置函数的返回值:函数最后: return value;</p><h3 id="接收返回值"><a href="#接收返回值" class="headerlink" title="接收返回值"></a>接收返回值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = a();</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure><h3 id="设置返回值"><a href="#设置返回值" class="headerlink" title="设置返回值"></a>设置返回值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> mn = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">return</span> mn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> q = fn();</span><br><span class="line"><span class="built_in">console</span>.log(q);</span><br></pre></td></tr></table></figure><h3 id="return作用"><a href="#return作用" class="headerlink" title="return作用"></a>return作用</h3><p>设置函数的返回值: 函数最后: return value;<br>return: 结束函数 return后面的代码不执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    <span class="comment">// 不执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> m = fn1();</span><br><span class="line"><span class="built_in">console</span>.log(m); <span class="comment">// &#x27;abc&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="返回多个"><a href="#返回多个" class="headerlink" title="返回多个"></a>返回多个</h4><p>return设置返回值的时候 一次只能返回一个数据 如果用,返回多个,只会返回最后一个;如果想要返回多个数据, 建议数组或者对象, 更推荐用对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// return 10, 20, 30;</span></span><br><span class="line">    <span class="comment">// return [10, 20, 30];</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        a: <span class="number">10</span>,</span><br><span class="line">        b: <span class="number">20</span>,</span><br><span class="line">        c: <span class="number">30</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> mn = fn2();</span><br><span class="line"><span class="built_in">console</span>.log(mn);</span><br></pre></td></tr></table></figure><h4 id="使用情况"><a href="#使用情况" class="headerlink" title="使用情况"></a>使用情况</h4><ol><li>封装函数 函数的最后去到的是一个数据</li><li>操作的对象 返回回来</li><li>函数内的数据 要在 函数外面用到的时候</li></ol><h4 id="返回值数据类型"><a href="#返回值数据类型" class="headerlink" title="返回值数据类型"></a>返回值数据类型</h4><p>返回值的数据类型可以是一切数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">90</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = rType();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><h2 id="封装步骤"><a href="#封装步骤" class="headerlink" title="封装步骤"></a>封装步骤</h2><ol><li>实现单个效果</li><li>声明空函数</li><li>单个效果放在空函数里</li><li>调用</li><li>分析不确定的项, 抽取参数</li><li>传参</li><li>设置返回值</li><li>接收返回值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMax</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 假设最大值</span></span><br><span class="line">    <span class="keyword">var</span> max = data[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 2. 用这个值和数组的每一个值进行比较</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 如果比假设值大</span></span><br><span class="line">        <span class="keyword">if</span> (max &lt; data[i]) &#123;</span><br><span class="line">            max = data[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(max);</span></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> m = getMax(arr);</span><br><span class="line"><span class="built_in">console</span>.log(m);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2021/09/16/day4%E8%87%AA%E6%80%BB/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
